{
  "address": "0xAb91002a8932fe679c4Da8d318F6a798A89D78EE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPublicSharedMetadata",
          "name": "_sharedMetadata",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        }
      ],
      "name": "adminMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getZorbRenderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "marketPlaces",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isKnown",
          "type": "bool"
        }
      ],
      "name": "setKnownMarketplaces",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "zorbForAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1aaf548722db2d50099cd57b6d002dde4c6027a0d71ace580d458a2556d3bdcb",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0xAb91002a8932fe679c4Da8d318F6a798A89D78EE",
    "transactionIndex": 36,
    "gasUsed": "3120666",
    "logsBloom": "0x
    "blockHash": "0x5852ab47c5ccfa4f714e69d5bdbdc8459cc6f2ea2d0fafd71e69bd5f79ea3027",
    "transactionHash": "0x1aaf548722db2d50099cd57b6d002dde4c6027a0d71ace580d458a2556d3bdcb",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 9908294,
        "transactionHash": "0x1aaf548722db2d50099cd57b6d002dde4c6027a0d71ace580d458a2556d3bdcb",
        "address": "0xAb91002a8932fe679c4Da8d318F6a798A89D78EE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x5852ab47c5ccfa4f714e69d5bdbdc8459cc6f2ea2d0fafd71e69bd5f79ea3027"
      }
    ],
    "blockNumber": 9908294,
    "cumulativeGasUsed": "10204955",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a3245d54E5407E276c47f0C181a22bf90c797Ce"
  ],
  "solcInputHash": "ae1226ea607984b7bb12c49b698e955e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPublicSharedMetadata\",\"name\":\"_sharedMetadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getZorbRenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"marketPlaces\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isKnown\",\"type\":\"bool\"}],\"name\":\"setKnownMarketplaces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"zorbForAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This custom NFT contract stores additional metadata to use for tokenURI\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZorbNFT.sol\":\"ZorbNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/ColorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary ColorLib {\\n    struct HSL {\\n        uint256 h;\\n        uint256 s;\\n        uint256 l;\\n    }\\n\\n    function cubicInOut(uint16 p) internal pure returns (int256) {\\n        if (p < 13) {\\n            return 0;\\n        }\\n        if (p < 17) {\\n            return 1;\\n        }\\n        if (p < 19) {\\n            return 2;\\n        }\\n        if (p < 21) {\\n            return 3;\\n        }\\n        if (p < 23) {\\n            return 4;\\n        }\\n        if (p < 24) {\\n            return 5;\\n        }\\n        if (p < 25) {\\n            return 6;\\n        }\\n        if (p < 27) {\\n            return 7;\\n        }\\n        if (p < 28) {\\n            return 8;\\n        }\\n        if (p < 29) {\\n            return 9;\\n        }\\n        if (p < 30) {\\n            return 10;\\n        }\\n        if (p < 31) {\\n            return 11;\\n        }\\n        if (p < 32) {\\n            return 13;\\n        }\\n        if (p < 33) {\\n            return 14;\\n        }\\n        if (p < 34) {\\n            return 15;\\n        }\\n        if (p < 35) {\\n            return 17;\\n        }\\n        if (p < 36) {\\n            return 18;\\n        }\\n        if (p < 37) {\\n            return 20;\\n        }\\n        if (p < 38) {\\n            return 21;\\n        }\\n        if (p < 39) {\\n            return 23;\\n        }\\n        if (p < 40) {\\n            return 25;\\n        }\\n        if (p < 41) {\\n            return 27;\\n        }\\n        if (p < 42) {\\n            return 29;\\n        }\\n        if (p < 43) {\\n            return 31;\\n        }\\n        if (p < 44) {\\n            return 34;\\n        }\\n        if (p < 45) {\\n            return 36;\\n        }\\n        if (p < 46) {\\n            return 38;\\n        }\\n        if (p < 47) {\\n            return 41;\\n        }\\n        if (p < 48) {\\n            return 44;\\n        }\\n        if (p < 49) {\\n            return 47;\\n        }\\n        if (p < 50) {\\n            return 50;\\n        }\\n        if (p < 51) {\\n            return 52;\\n        }\\n        if (p < 52) {\\n            return 55;\\n        }\\n        if (p < 53) {\\n            return 58;\\n        }\\n        if (p < 54) {\\n            return 61;\\n        }\\n        if (p < 55) {\\n            return 63;\\n        }\\n        if (p < 56) {\\n            return 65;\\n        }\\n        if (p < 57) {\\n            return 68;\\n        }\\n        if (p < 58) {\\n            return 70;\\n        }\\n        if (p < 59) {\\n            return 72;\\n        }\\n        if (p < 60) {\\n            return 74;\\n        }\\n        if (p < 61) {\\n            return 76;\\n        }\\n        if (p < 62) {\\n            return 78;\\n        }\\n        if (p < 63) {\\n            return 79;\\n        }\\n        if (p < 64) {\\n            return 81;\\n        }\\n        if (p < 65) {\\n            return 82;\\n        }\\n        if (p < 66) {\\n            return 84;\\n        }\\n        if (p < 67) {\\n            return 85;\\n        }\\n        if (p < 68) {\\n            return 86;\\n        }\\n        if (p < 69) {\\n            return 88;\\n        }\\n        if (p < 70) {\\n            return 89;\\n        }\\n        if (p < 71) {\\n            return 90;\\n        }\\n        if (p < 72) {\\n            return 91;\\n        }\\n        if (p < 74) {\\n            return 92;\\n        }\\n        if (p < 75) {\\n            return 93;\\n        }\\n        if (p < 76) {\\n            return 94;\\n        }\\n        if (p < 78) {\\n            return 95;\\n        }\\n        if (p < 80) {\\n            return 96;\\n        }\\n        if (p < 82) {\\n            return 97;\\n        }\\n        if (p < 86) {\\n            return 98;\\n        }\\n        return 99;\\n    }\\n\\n    function cubicIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 22) {\\n            return 0;\\n        }\\n        if (p < 28) {\\n            return 1;\\n        }\\n        if (p < 32) {\\n            return 2;\\n        }\\n        if (p < 32) {\\n            return 3;\\n        }\\n        if (p < 34) {\\n            return 3;\\n        }\\n        if (p < 36) {\\n            return 4;\\n        }\\n        if (p < 39) {\\n            return 5;\\n        }\\n        if (p < 41) {\\n            return 6;\\n        }\\n        if (p < 43) {\\n            return 7;\\n        }\\n        if (p < 46) {\\n            return 9;\\n        }\\n        if (p < 47) {\\n            return 10;\\n        }\\n        if (p < 49) {\\n            return 11;\\n        }\\n        if (p < 50) {\\n            return 12;\\n        }\\n        if (p < 51) {\\n            return 13;\\n        }\\n        if (p < 53) {\\n            return 14;\\n        }\\n        if (p < 54) {\\n            return 15;\\n        }\\n        if (p < 55) {\\n            return 16;\\n        }\\n        if (p < 56) {\\n            return 17;\\n        }\\n        if (p < 57) {\\n            return 18;\\n        }\\n        if (p < 58) {\\n            return 19;\\n        }\\n        if (p < 59) {\\n            return 20;\\n        }\\n        if (p < 60) {\\n            return 21;\\n        }\\n        if (p < 61) {\\n            return 22;\\n        }\\n        if (p < 62) {\\n            return 23;\\n        }\\n        if (p < 63) {\\n            return 25;\\n        }\\n        if (p < 64) {\\n            return 26;\\n        }\\n        if (p < 65) {\\n            return 27;\\n        }\\n        if (p < 66) {\\n            return 28;\\n        }\\n        if (p < 67) {\\n            return 30;\\n        }\\n        if (p < 68) {\\n            return 31;\\n        }\\n        if (p < 69) {\\n            return 32;\\n        }\\n        if (p < 70) {\\n            return 34;\\n        }\\n        if (p < 71) {\\n            return 35;\\n        }\\n        if (p < 72) {\\n            return 37;\\n        }\\n        if (p < 73) {\\n            return 38;\\n        }\\n        if (p < 74) {\\n            return 40;\\n        }\\n        if (p < 75) {\\n            return 42;\\n        }\\n        if (p < 76) {\\n            return 43;\\n        }\\n        if (p < 77) {\\n            return 45;\\n        }\\n        if (p < 78) {\\n            return 47;\\n        }\\n        if (p < 79) {\\n            return 49;\\n        }\\n        if (p < 80) {\\n            return 51;\\n        }\\n        if (p < 81) {\\n            return 53;\\n        }\\n        if (p < 82) {\\n            return 55;\\n        }\\n        if (p < 83) {\\n            return 57;\\n        }\\n        if (p < 84) {\\n            return 59;\\n        }\\n        if (p < 85) {\\n            return 61;\\n        }\\n        if (p < 86) {\\n            return 63;\\n        }\\n        if (p < 87) {\\n            return 65;\\n        }\\n        if (p < 88) {\\n            return 68;\\n        }\\n        if (p < 89) {\\n            return 70;\\n        }\\n        if (p < 90) {\\n            return 72;\\n        }\\n        if (p < 91) {\\n            return 75;\\n        }\\n        if (p < 92) {\\n            return 77;\\n        }\\n        if (p < 93) {\\n            return 80;\\n        }\\n        if (p < 94) {\\n            return 83;\\n        }\\n        if (p < 95) {\\n            return 85;\\n        }\\n        if (p < 96) {\\n            return 88;\\n        }\\n        if (p < 97) {\\n            return 91;\\n        }\\n        if (p < 98) {\\n            return 94;\\n        }\\n        return 97;\\n    }\\n\\n    function quintIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 39) {\\n            return 0;\\n        }\\n        if (p < 45) {\\n            return 1;\\n        }\\n        if (p < 49) {\\n            return 2;\\n        }\\n        if (p < 52) {\\n            return 3;\\n        }\\n        if (p < 53) {\\n            return 4;\\n        }\\n        if (p < 54) {\\n            return 4;\\n        }\\n        if (p < 55) {\\n            return 5;\\n        }\\n        if (p < 56) {\\n            return 5;\\n        }\\n        if (p < 57) {\\n            return 6;\\n        }\\n        if (p < 58) {\\n            return 6;\\n        }\\n        if (p < 59) {\\n            return 7;\\n        }\\n        if (p < 60) {\\n            return 7;\\n        }\\n        if (p < 61) {\\n            return 8;\\n        }\\n        if (p < 62) {\\n            return 9;\\n        }\\n        if (p < 63) {\\n            return 9;\\n        }\\n        if (p < 64) {\\n            return 10;\\n        }\\n        if (p < 65) {\\n            return 11;\\n        }\\n        if (p < 66) {\\n            return 12;\\n        }\\n        if (p < 67) {\\n            return 13;\\n        }\\n        if (p < 68) {\\n            return 14;\\n        }\\n        if (p < 69) {\\n            return 15;\\n        }\\n        if (p < 70) {\\n            return 16;\\n        }\\n        if (p < 71) {\\n            return 18;\\n        }\\n        if (p < 72) {\\n            return 19;\\n        }\\n        if (p < 73) {\\n            return 20;\\n        }\\n        if (p < 74) {\\n            return 22;\\n        }\\n        if (p < 75) {\\n            return 23;\\n        }\\n        if (p < 76) {\\n            return 25;\\n        }\\n        if (p < 77) {\\n            return 27;\\n        }\\n        if (p < 78) {\\n            return 28;\\n        }\\n        if (p < 79) {\\n            return 30;\\n        }\\n        if (p < 80) {\\n            return 32;\\n        }\\n        if (p < 81) {\\n            return 34;\\n        }\\n        if (p < 82) {\\n            return 37;\\n        }\\n        if (p < 83) {\\n            return 39;\\n        }\\n        if (p < 84) {\\n            return 41;\\n        }\\n        if (p < 85) {\\n            return 44;\\n        }\\n        if (p < 86) {\\n            return 47;\\n        }\\n        if (p < 87) {\\n            return 49;\\n        }\\n        if (p < 88) {\\n            return 52;\\n        }\\n        if (p < 89) {\\n            return 55;\\n        }\\n        if (p < 90) {\\n            return 59;\\n        }\\n        if (p < 91) {\\n            return 62;\\n        }\\n        if (p < 92) {\\n            return 65;\\n        }\\n        if (p < 93) {\\n            return 69;\\n        }\\n        if (p < 94) {\\n            return 73;\\n        }\\n        if (p < 95) {\\n            return 77;\\n        }\\n        if (p < 96) {\\n            return 81;\\n        }\\n        if (p < 97) {\\n            return 85;\\n        }\\n        if (p < 98) {\\n            return 90;\\n        }\\n        return 95;\\n    }\\n\\n    // Util for keeping hue range in 0-360 positive\\n    function clampHue(int256 h) internal pure returns (uint256) {\\n        unchecked {\\n            h /= 100;\\n            if (h >= 0) {\\n                return uint256(h) % 360;\\n            } else {\\n                return (uint256(-1 * h) % 360);\\n            }\\n        }\\n    }\\n\\n    function lerpHue(\\n        uint8 optionNum,\\n        uint256 direction,\\n        uint256 uhue,\\n        uint8 pct\\n    ) internal pure returns (uint256) {\\n        // unchecked {\\n        uint256 option = optionNum % 4;\\n        int256 hue = int256(uhue);\\n\\n        if (option == 0) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 10 : hue + 10)))\\n                );\\n        }\\n        if (option == 1) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 30 : hue + 30)))\\n                );\\n        }\\n        if (option == 2) {\\n            return\\n                clampHue(\\n                    (\\n                        (((100 - cubicInOut(pct)) * hue) +\\n                            (cubicInOut(pct) *\\n                                (direction == 0 ? hue - 50 : hue + 50)))\\n                    )\\n                );\\n        }\\n\\n        return\\n            clampHue(\\n                ((100 - cubicInOut(pct)) * hue) +\\n                    (cubicInOut(pct) *\\n                        int256(\\n                            hue +\\n                                ((direction == 0 ? int256(-60) : int256(60)) *\\n                                    int256(uint256(optionNum > 128 ? 1 : 0))) +\\n                                30\\n                        ))\\n            );\\n        // }\\n    }\\n\\n    function lerpLightness(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        uint256 lerpPercent;\\n        if (optionNum == 0) {\\n            lerpPercent = quintIn(pct);\\n        } else {\\n            lerpPercent = cubicIn(pct);\\n        }\\n        return\\n            1 + (((100.0 - lerpPercent) * start + (lerpPercent * end)) / 100);\\n    }\\n\\n    function lerpSaturation(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 lerpPercent;\\n            if (optionNum == 0) {\\n                lerpPercent = quintIn(pct);\\n                return\\n                    1 +\\n                    (((100.0 - lerpPercent) * start + lerpPercent * end) / 100);\\n            }\\n            lerpPercent = pct;\\n            return ((100.0 - lerpPercent) * start + lerpPercent * end) / 100;\\n        }\\n    }\\n\\n    function encodeStr(\\n        uint256 h,\\n        uint256 s,\\n        uint256 l\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"hsl(\\\",\\n                Strings.toString(h),\\n                \\\", \\\",\\n                Strings.toString(s),\\n                \\\"%, \\\",\\n                Strings.toString(l),\\n                \\\"%)\\\"\\n            );\\n    }\\n\\n    function gradientForAddress(address addr)\\n        internal\\n        pure\\n        returns (bytes[5] memory)\\n    {\\n        unchecked {\\n            bytes32 addrBytes = bytes32(uint256(uint160(addr)));\\n            uint256 startHue = (uint256(uint8(addrBytes[31 - 12])) * 24) / 17; // 255 - 360\\n            uint256 startLightness = (uint256(uint8(addrBytes[31 - 2])) * 5) /\\n                34 +\\n                32; // 255 => 37.5 + 32 (32, 69.5)\\n            uint256 endLightness = 97;\\n            endLightness += (((uint256(uint8(addrBytes[31 - 8])) * 5) / 51) +\\n                72); // 72-97\\n            endLightness /= 2;\\n\\n            uint256 startSaturation = uint256(uint8(addrBytes[31 - 7])) /\\n                16 +\\n                81; // 0-16 + 72\\n\\n            uint256 endSaturation = uint256(uint8(addrBytes[31 - 10]) * 11) / 128 + 70; // 0-22 + 70\\n            if (endSaturation > startSaturation - 10) {\\n                endSaturation = startSaturation - 10;\\n            }\\n\\n            return [\\n                // 0\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        0\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        100\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        100\\n                    )\\n                ),\\n                // 1\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        10\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        90\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        90\\n                    )\\n                ),\\n                // 2\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        70\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        70\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        70\\n                    )\\n                ),\\n                // 3\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        90\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        20\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        20\\n                    )\\n                ),\\n                // 4\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        100\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        0\\n                    ),\\n                    startLightness\\n                )\\n            ];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32b1fa83740638d288c3466cc0953bcc64d0defbf9d7d4527a09753a5d744fc2\",\"license\":\"GPL-3.0\"},\"contracts/ZorbNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {ERC721Burnable, ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\\\";\\nimport {ColorLib} from \\\"./ColorLib.sol\\\";\\n\\ninterface INFT {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\n/// This custom NFT contract stores additional metadata to use for tokenURI\\ncontract ZorbNFT is ERC721, ERC721Burnable, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    // new years 2022 base\\n\\n    // PROD\\n    // uint256 private constant MINT_START_AT = 1640995200;\\n    // uint256 private constant MINT_DURATION = 24 hours;\\n\\n    // RINKEBY ONLY\\n    uint256 private constant MINT_START_AT = 1640917926;\\n    uint256 private constant MINT_DURATION = 24 hours;\\n\\n    mapping(address => bool) private knownMarketplace;\\n    mapping(uint256 => address) private lastOwner;\\n\\n    Counters.Counter currentTokenId;\\n    IPublicSharedMetadata private immutable sharedMetadata;\\n\\n    modifier onlyApproved(uint256 tokenId) {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Ony approved\\\");\\n        _;\\n    }\\n\\n    constructor(IPublicSharedMetadata _sharedMetadata) ERC721(\\\"Zorbs\\\", \\\"ZORB\\\") {\\n        sharedMetadata = _sharedMetadata;\\n        currentTokenId.increment();\\n    }\\n\\n    function setKnownMarketplaces(address[] calldata marketPlaces, bool isKnown)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < marketPlaces.length; i++) {\\n            knownMarketplace[marketPlaces[i]] = isKnown;\\n        }\\n    }\\n\\n    function mintIsOpen() public view returns (bool) {\\n        return\\n            block.timestamp > MINT_START_AT &&\\n            block.timestamp <= MINT_START_AT + MINT_DURATION;\\n    }\\n\\n    function mint() public {\\n        require(mintIsOpen(), \\\"not open\\\");\\n        _mint(msg.sender, currentTokenId.current());\\n        currentTokenId.increment();\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return currentTokenId.current();\\n    }\\n\\n    function adminMint(address[] memory to) public onlyOwner {\\n        for (uint256 i = 0; i < to.length; i++) {\\n            _mint(to[i], currentTokenId.current());\\n            currentTokenId.increment();\\n        }\\n    }\\n\\n    function zorbForAddress(address user) public view returns (string memory) {\\n        bytes[5] memory colors = ColorLib.gradientForAddress(user);\\n        string memory encoded = sharedMetadata.base64Encode(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 220 220\\\"><defs>'\\n                '<radialGradient fx=\\\"66.46%\\\" fy=\\\"24.36%\\\" id=\\\"grad\\\">'\\n                '<stop offset=\\\"15.62%\\\" stop-color=\\\"',\\n                colors[0],\\n                '\\\" /><stop offset=\\\"39.58%\\\" stop-color=\\\"',\\n                colors[1],\\n                '\\\" /><stop offset=\\\"72.92%\\\" stop-color=\\\"',\\n                colors[2],\\n                '\\\" /><stop offset=\\\"90.63%\\\" stop-color=\\\"',\\n                colors[3],\\n                '\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"',\\n                colors[4],\\n                '\\\" /></radialGradient></defs>'\\n                '<g transform=\\\"translate(10 10) scale(0.9)\\\"><circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"50%\\\" fill=\\\"url(#grad)\\\" /></g>'\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", encoded));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        if (knownMarketplace[to]) {\\n            lastOwner[tokenId] = from;\\n        }\\n    }\\n\\n    function getZorbRenderAddress(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address zorbFor = INFT(address(this)).ownerOf(tokenId);\\n        if (knownMarketplace[zorbFor] && lastOwner[tokenId] != address(0x0)) {\\n            zorbFor = lastOwner[tokenId];\\n        }\\n        return zorbFor;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            sharedMetadata.encodeMetadataJSON(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\"Zora Zorb #',\\n                    sharedMetadata.numberToString(tokenId),\\n                    '\\\", \\\"description\\\": \\\"Zora Zorb New Years Drop 2022',\\n                    '\\\\\\\\n\\\\\\\\nCelebrate Zora with your own unique Zorb\\\\\\\\n\\\\\\\\n[https://zorb.dev/](zorb.dev)\\\\\\\\n\\\\\\\\nWhen Zorbs are sold or transferred, they update to reflect the zorb of the current owner.\\\", \\\"image\\\": \\\"',\\n                    zorbForAddress(getZorbRenderAddress(tokenId)),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x770588760d8b03d58906fc6546e22a2318996c7896e71ec6334e216bfc704a63\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200381b3803806200381b8339810160408190526200003491620001e1565b60408051808201825260058152645a6f72627360d81b6020808301918252835180850190945260048452632d27a92160e11b9084015281519192916200007d916000916200013b565b508051620000939060019060208401906200013b565b505050620000b0620000aa620000dc60201b60201c565b620000e0565b6001600160a01b038116608052620000d5600962000132602090811b62000dfd17901c565b5062000250565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546001019055565b828054620001499062000213565b90600052602060002090601f0160209004810192826200016d5760008555620001b8565b82601f106200018857805160ff1916838001178555620001b8565b82800160010185558215620001b8579182015b82811115620001b85782518255916020019190600101906200019b565b50620001c6929150620001ca565b5090565b5b80821115620001c65760008155600101620001cb565b600060208284031215620001f457600080fd5b81516001600160a01b03811681146200020c57600080fd5b9392505050565b600181811c908216806200022857607f821691505b602082108114156200024a57634e487b7160e01b600052602260045260246000fd5b50919050565b6080516135a86200027360003960008181610af00152610c4901526135a86000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063aa1152ab1161007c578063aa1152ab146102bb578063b88d4fde146102c3578063c87b56dd146102d6578063de909942146102e9578063e985e9c5146102fc578063f2fde38b1461030f57600080fd5b806370a082311461026a578063715018a61461027d5780638da5cb5b1461028557806391557ac41461028d57806395d89b41146102a0578063a22cb465146102a857600080fd5b806321cbb5bd1161011557806321cbb5bd146101f857806323b872dd1461020b57806342842e0e1461021e57806342966c68146102315780636352211e146102445780636411fb451461025757600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c55780631249c58b146101da57806318160ddd146101e2575b600080fd5b61017061016b366004612866565b610322565b60405190151581526020015b60405180910390f35b61018d610374565b60405161017c91906128e2565b6101ad6101a83660046128f5565b610406565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004612923565b610493565b005b6101d86105a4565b6101ea610605565b60405190815260200161017c565b6101d8610206366004612995565b610615565b6101d8610219366004612a46565b61069a565b6101d861022c366004612a46565b6106cc565b6101d861023f3660046128f5565b6106e7565b6101ad6102523660046128f5565b610761565b6101d8610265366004612a97565b6107d8565b6101ea610278366004612b1a565b61087e565b6101d8610905565b6101ad61093e565b6101ad61029b3660046128f5565b61094d565b61018d610a24565b6101d86102b6366004612b37565b610a33565b610170610a3e565b6101d86102d1366004612b93565b610a67565b61018d6102e43660046128f5565b610a99565b61018d6102f7366004612b1a565b610c1a565b61017061030a366004612c41565b610d32565b6101d861031d366004612b1a565b610d60565b60006001600160e01b031982166380ac58cd60e01b148061035357506001600160e01b03198216635b5e139f60e01b145b8061036e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461038390612c7a565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90612c7a565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050905090565b600061041182610e06565b6104775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061049e82610761565b9050806001600160a01b0316836001600160a01b0316141561050c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161046e565b336001600160a01b038216148061052857506105288133610d32565b6105955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161046e565b61059f8383610e23565b505050565b6105ac610a3e565b6105e35760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b604482015260640161046e565b6105f5336105f060095490565b610e91565b610603600980546001019055565b565b600061061060095490565b905090565b3361061e61093e565b6001600160a01b0316146106445760405162461bcd60e51b815260040161046e90612cb5565b60005b81518110156106965761067682828151811061066557610665612cea565b60200260200101516105f060095490565b610684600980546001019055565b8061068e81612d16565b915050610647565b5050565b6106a5335b82610fbe565b6106c15760405162461bcd60e51b815260040161046e90612d31565b61059f838383611088565b61059f83838360405180602001604052806000815250610a67565b6106f03361069f565b6107555760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b606482015260840161046e565b61075e81611221565b50565b6000818152600260205260408120546001600160a01b03168061036e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161046e565b336107e161093e565b6001600160a01b0316146108075760405162461bcd60e51b815260040161046e90612cb5565b60005b8281101561087857816007600086868581811061082957610829612cea565b905060200201602081019061083e9190612b1a565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061087081612d16565b91505061080a565b50505050565b60006001600160a01b0382166108e95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b3361090e61093e565b6001600160a01b0316146109345760405162461bcd60e51b815260040161046e90612cb5565b61060360006112b6565b6006546001600160a01b031690565b6040516331a9108f60e11b81526004810182905260009081903090636352211e9060240160206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190612d82565b6001600160a01b03811660009081526007602052604090205490915060ff168015610a0257506000838152600860205260409020546001600160a01b031615155b1561036e5750506000908152600860205260409020546001600160a01b031690565b60606001805461038390612c7a565b610696338383611308565b60006361ce6ba6421180156106105750610a5f620151806361ce6ba6612d9f565b421115905090565b610a713383610fbe565b610a8d5760405162461bcd60e51b815260040161046e90612d31565b610878848484846113d3565b6060610aa482610e06565b610adb5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b604482015260640161046e565b60405162b86e3360e51b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d01fde8c90829063170dc6609060240160006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7e9190810190612db7565b610b8a6102f78661094d565b604051602001610b9b929190612e49565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610bc691906128e2565b60006040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036e9190810190612db7565b60606000610c2783611406565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b1996610c889691959194939201612fc5565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610cb391906128e2565b60006040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d079190810190612db7565b905080604051602001610d1a919061324f565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33610d6961093e565b6001600160a01b031614610d8f5760405162461bcd60e51b815260040161046e90612cb5565b6001600160a01b038116610df45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046e565b61075e816112b6565b80546001019055565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e5882610761565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216610ee75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b610ef081610e06565b15610f3d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b610f49600083836116ea565b6001600160a01b0382166000908152600360205260408120805460019290610f72908490612d9f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613553833981519152908290a45050565b6000610fc982610e06565b61102a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161046e565b600061103583610761565b9050806001600160a01b0316846001600160a01b031614806110705750836001600160a01b031661106584610406565b6001600160a01b0316145b8061108057506110808185610d32565b949350505050565b826001600160a01b031661109b82610761565b6001600160a01b0316146111035760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161046e565b6001600160a01b0382166111655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6111708383836116ea565b61117b600082610e23565b6001600160a01b03831660009081526003602052604081208054600192906111a4908490613294565b90915550506001600160a01b03821660009081526003602052604081208054600192906111d2908490612d9f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061355383398151915291a4505050565b600061122c82610761565b905061123a816000846116ea565b611245600083610e23565b6001600160a01b038116600090815260036020526040812080546001929061126e908490613294565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613553833981519152908390a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156113665760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6113de848484611088565b6113ea84848484611739565b6108785760405162461bcd60e51b815260040161046e906132ab565b61140e612829565b6001600160a01b038216600060118260131a60180281611430576114306132fd565b0490506000602283601d1a6005028161144b5761144b6132fd565b046020019050606160338460171a60050281611469576114696132fd565b0401604801600281049050600060108560181a81611489576114896132fd565b04605101905060006080866015600b91901a0260ff16816114ac576114ac6132fd565b046046019050600a82038111156114c4575060091981015b6040805160a081019091528061153e6114f989601c1a60028b60191a816114ed576114ed6132fd565b0660ff168a6000611846565b61151960028b601c1a8161150f5761150f6132fd565b068787606461199a565b61153960028c601a1a8161152f5761152f6132fd565b068a8a60646119e2565b611a5a565b81526020016115ac61156c89601c1a60028b60191a81611560576115606132fd565b0660ff168a600a611846565b61158c60028b601c1a81611582576115826132fd565b068787605a61199a565b61153960028c601a1a816115a2576115a26132fd565b068a8a605a6119e2565b815260200161161a6115da89601c1a60028b60191a816115ce576115ce6132fd565b0660ff168a6046611846565b6115fa60028b601c1a816115f0576115f06132fd565b068787604661199a565b61153960028c601a1a81611610576116106132fd565b068a8a60466119e2565b815260200161168861164889601c1a60028b60191a8161163c5761163c6132fd565b0660ff168a605a611846565b61166860028b601c1a8161165e5761165e6132fd565b068787601461199a565b61153960028c601a1a8161167e5761167e6132fd565b068a8a60146119e2565b81526020016116dc6116b689601c1a60028b60191a816116aa576116aa6132fd565b0660ff168a6064611846565b6116d660028b601c1a816116cc576116cc6132fd565b068787600061199a565b88611a5a565b905298975050505050505050565b6001600160a01b03821660009081526007602052604090205460ff161561059f57600081815260086020526040902080546001600160a01b0385166001600160a01b0319909116179055505050565b60006001600160a01b0384163b1561183b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061177d903390899088908890600401613313565b602060405180830381600087803b15801561179757600080fd5b505af19250505080156117c7575060408051601f3d908101601f191682019092526117c491810190613346565b60015b611821573d8080156117f5576040519150601f19603f3d011682016040523d82523d6000602084013e6117fa565b606091505b5080516118195760405162461bcd60e51b815260040161046e906132ab565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611080565b506001949350505050565b600080611854600487613363565b60ff16905083816118c1576118b886156118785761187382600a613385565b611883565b611883600a836133c6565b6118909060ff8716613405565b8261189f60ff881660646133c6565b6118a99190613405565b6118b39190613385565b611aa1565b92505050611080565b81600114156118e9576118b886156118de5761187382601e613385565b611883601e836133c6565b8160021415611944576118b8861561190b57611906826032613385565b611916565b6119166032836133c6565b6119228660ff16611ad4565b61192c9190613405565b826119398760ff16611ad4565b61189f9060646133c6565b61198f60808860ff161161195957600061195c565b60015b60ff16871561196c57603c611970565b603b195b61197a9190613405565b6119849083613385565b61191690601e613385565b979650505050505050565b60008060ff86166119ca576119ae83611fca565b60ff169050606481810386028583020104600101915050611080565b50816064818103860285830201049695505050505050565b60008060ff8616611a00576119f683611fca565b60ff169050611a0f565b611a0983612326565b60ff1690505b6064611a1b858361348a565b86611a27846064613294565b611a31919061348a565b611a3b9190612d9f565b611a4591906134a9565b611a50906001612d9f565b9695505050505050565b6060611a658461272c565b611a6e8461272c565b611a778461272c565b604051602001611a89939291906134bd565b60405160208183030381529060405290509392505050565b606490056000808212611aba57610168825b0692915050565b610168826000190281611ab357611ab36132fd565b919050565b6000600d8261ffff161015611aeb57506000919050565b60118261ffff161015611b0057506001919050565b60138261ffff161015611b1557506002919050565b60158261ffff161015611b2a57506003919050565b60178261ffff161015611b3f57506004919050565b60188261ffff161015611b5457506005919050565b60198261ffff161015611b6957506006919050565b601b8261ffff161015611b7e57506007919050565b601c8261ffff161015611b9357506008919050565b601d8261ffff161015611ba857506009919050565b601e8261ffff161015611bbd5750600a919050565b601f8261ffff161015611bd25750600b919050565b60208261ffff161015611be75750600d919050565b60218261ffff161015611bfc5750600e919050565b60228261ffff161015611c115750600f919050565b60238261ffff161015611c2657506011919050565b60248261ffff161015611c3b57506012919050565b60258261ffff161015611c5057506014919050565b60268261ffff161015611c6557506015919050565b60278261ffff161015611c7a57506017919050565b60288261ffff161015611c8f57506019919050565b60298261ffff161015611ca45750601b919050565b602a8261ffff161015611cb95750601d919050565b602b8261ffff161015611cce5750601f919050565b602c8261ffff161015611ce357506022919050565b602d8261ffff161015611cf857506024919050565b602e8261ffff161015611d0d57506026919050565b602f8261ffff161015611d2257506029919050565b60308261ffff161015611d375750602c919050565b60318261ffff161015611d4c5750602f919050565b60328261ffff161015611d6157506032919050565b60338261ffff161015611d7657506034919050565b60348261ffff161015611d8b57506037919050565b60358261ffff161015611da05750603a919050565b60368261ffff161015611db55750603d919050565b60378261ffff161015611dca5750603f919050565b60388261ffff161015611ddf57506041919050565b60398261ffff161015611df457506044919050565b603a8261ffff161015611e0957506046919050565b603b8261ffff161015611e1e57506048919050565b603c8261ffff161015611e335750604a919050565b603d8261ffff161015611e485750604c919050565b603e8261ffff161015611e5d5750604e919050565b603f8261ffff161015611e725750604f919050565b60408261ffff161015611e8757506051919050565b60418261ffff161015611e9c57506052919050565b60428261ffff161015611eb157506054919050565b60438261ffff161015611ec657506055919050565b60448261ffff161015611edb57506056919050565b60458261ffff161015611ef057506058919050565b60468261ffff161015611f0557506059919050565b60478261ffff161015611f1a5750605a919050565b60488261ffff161015611f2f5750605b919050565b604a8261ffff161015611f445750605c919050565b604b8261ffff161015611f595750605d919050565b604c8261ffff161015611f6e5750605e919050565b604e8261ffff161015611f835750605f919050565b60508261ffff161015611f9857506060919050565b60528261ffff161015611fad57506061919050565b60568261ffff161015611fc257506062919050565b506063919050565b60006027821015611fdd57506000919050565b602d821015611fee57506001919050565b6031821015611fff57506002919050565b603482101561201057506003919050565b603582101561202157506004919050565b603682101561203257506004919050565b603782101561204357506005919050565b603882101561205457506005919050565b603982101561206557506006919050565b603a82101561207657506006919050565b603b82101561208757506007919050565b603c82101561209857506007919050565b603d8210156120a957506008919050565b603e8210156120ba57506009919050565b603f8210156120cb57506009919050565b60408210156120dc5750600a919050565b60418210156120ed5750600b919050565b60428210156120fe5750600c919050565b604382101561210f5750600d919050565b60448210156121205750600e919050565b60458210156121315750600f919050565b604682101561214257506010919050565b604782101561215357506012919050565b604882101561216457506013919050565b604982101561217557506014919050565b604a82101561218657506016919050565b604b82101561219757506017919050565b604c8210156121a857506019919050565b604d8210156121b95750601b919050565b604e8210156121ca5750601c919050565b604f8210156121db5750601e919050565b60508210156121ec57506020919050565b60518210156121fd57506022919050565b605282101561220e57506025919050565b605382101561221f57506027919050565b605482101561223057506029919050565b60558210156122415750602c919050565b60568210156122525750602f919050565b605782101561226357506031919050565b605882101561227457506034919050565b605982101561228557506037919050565b605a8210156122965750603b919050565b605b8210156122a75750603e919050565b605c8210156122b857506041919050565b605d8210156122c957506045919050565b605e8210156122da57506049919050565b605f8210156122eb5750604d919050565b60608210156122fc57506051919050565b606182101561230d57506055919050565b606282101561231e5750605a919050565b50605f919050565b6000601682101561233957506000919050565b601c82101561234a57506001919050565b602082101561235b57506002919050565b602082101561236c57506003919050565b602282101561237d57506003919050565b602482101561238e57506004919050565b602782101561239f57506005919050565b60298210156123b057506006919050565b602b8210156123c157506007919050565b602e8210156123d257506009919050565b602f8210156123e35750600a919050565b60318210156123f45750600b919050565b60328210156124055750600c919050565b60338210156124165750600d919050565b60358210156124275750600e919050565b60368210156124385750600f919050565b603782101561244957506010919050565b603882101561245a57506011919050565b603982101561246b57506012919050565b603a82101561247c57506013919050565b603b82101561248d57506014919050565b603c82101561249e57506015919050565b603d8210156124af57506016919050565b603e8210156124c057506017919050565b603f8210156124d157506019919050565b60408210156124e25750601a919050565b60418210156124f35750601b919050565b60428210156125045750601c919050565b60438210156125155750601e919050565b60448210156125265750601f919050565b604582101561253757506020919050565b604682101561254857506022919050565b604782101561255957506023919050565b604882101561256a57506025919050565b604982101561257b57506026919050565b604a82101561258c57506028919050565b604b82101561259d5750602a919050565b604c8210156125ae5750602b919050565b604d8210156125bf5750602d919050565b604e8210156125d05750602f919050565b604f8210156125e157506031919050565b60508210156125f257506033919050565b605182101561260357506035919050565b605282101561261457506037919050565b605382101561262557506039919050565b60548210156126365750603b919050565b60558210156126475750603d919050565b60568210156126585750603f919050565b605782101561266957506041919050565b605882101561267a57506044919050565b605982101561268b57506046919050565b605a82101561269c57506048919050565b605b8210156126ad5750604b919050565b605c8210156126be5750604d919050565b605d8210156126cf57506050919050565b605e8210156126e057506053919050565b605f8210156126f157506055919050565b606082101561270257506058919050565b60618210156127135750605b919050565b60628210156127245750605e919050565b506061919050565b6060816127505750506040805180820190915260018152600360fc1b602082015290565b8160005b811561277a578061276481612d16565b91506127739050600a836134a9565b9150612754565b6000816001600160401b038111156127945761279461294f565b6040519080825280601f01601f1916602001820160405280156127be576020820181803683370190505b5090505b8415611080576127d3600183613294565b91506127e0600a8661353e565b6127eb906030612d9f565b60f81b81838151811061280057612800612cea565b60200101906001600160f81b031916908160001a905350612822600a866134a9565b94506127c2565b6040518060a001604052806005905b60608152602001906001900390816128385790505090565b6001600160e01b03198116811461075e57600080fd5b60006020828403121561287857600080fd5b813561288381612850565b9392505050565b60005b838110156128a557818101518382015260200161288d565b838111156108785750506000910152565b600081518084526128ce81602086016020860161288a565b601f01601f19169290920160200192915050565b60208152600061288360208301846128b6565b60006020828403121561290757600080fd5b5035919050565b6001600160a01b038116811461075e57600080fd5b6000806040838503121561293657600080fd5b82356129418161290e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561298d5761298d61294f565b604052919050565b600060208083850312156129a857600080fd5b82356001600160401b03808211156129bf57600080fd5b818501915085601f8301126129d357600080fd5b8135818111156129e5576129e561294f565b8060051b91506129f6848301612965565b8181529183018401918481019088841115612a1057600080fd5b938501935b83851015612a3a5784359250612a2a8361290e565b8282529385019390850190612a15565b98975050505050505050565b600080600060608486031215612a5b57600080fd5b8335612a668161290e565b92506020840135612a768161290e565b929592945050506040919091013590565b80358015158114611acf57600080fd5b600080600060408486031215612aac57600080fd5b83356001600160401b0380821115612ac357600080fd5b818601915086601f830112612ad757600080fd5b813581811115612ae657600080fd5b8760208260051b8501011115612afb57600080fd5b602092830195509350612b119186019050612a87565b90509250925092565b600060208284031215612b2c57600080fd5b81356128838161290e565b60008060408385031215612b4a57600080fd5b8235612b558161290e565b9150612b6360208401612a87565b90509250929050565b60006001600160401b03821115612b8557612b8561294f565b50601f01601f191660200190565b60008060008060808587031215612ba957600080fd5b8435612bb48161290e565b93506020850135612bc48161290e565b92506040850135915060608501356001600160401b03811115612be657600080fd5b8501601f81018713612bf757600080fd5b8035612c0a612c0582612b6c565b612965565b818152886020838501011115612c1f57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612c5457600080fd5b8235612c5f8161290e565b91506020830135612c6f8161290e565b809150509250929050565b600181811c90821680612c8e57607f821691505b60208210811415612caf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d2a57612d2a612d00565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208284031215612d9457600080fd5b81516128838161290e565b60008219821115612db257612db2612d00565b500190565b600060208284031215612dc957600080fd5b81516001600160401b03811115612ddf57600080fd5b8201601f81018413612df057600080fd5b8051612dfe612c0582612b6c565b818152856020838501011115612e1357600080fd5b612e2482602083016020860161288a565b95945050505050565b60008151612e3f81856020860161288a565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090612e7a81601585016020880161288a565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351612fae8160fc84016020880161288a565b611a5060fc8284010161227d60f01b815260020190565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032323020323230223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236362e343625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b608082015260008651613090816098850160208b0161288a565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b8820181905287516130de8160be850160208c0161288a565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de820152612a3a6131a461319e61316861316261312a60e487018c612e2d565b7f22202f3e3c73746f70206f66667365743d2239302e363325222073746f702d6381526537b637b91e9160d11b602082015260260190565b89612e2d565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86612e2d565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c67207481527f72616e73666f726d3d227472616e736c61746528313020313029207363616c6560208201527f28302e3929223e3c636972636c652063783d22353025222063793d223530252260408201527f20723d22353025222066696c6c3d2275726c2823677261642922202f3e3c2f676060820152661f1e17b9bb339f60c91b608082015260870190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161328781601a85016020870161288a565b91909101601a0192915050565b6000828210156132a6576132a6612d00565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a50908301846128b6565b60006020828403121561335857600080fd5b815161288381612850565b600060ff831680613376576133766132fd565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156133a7576133a7612d00565b600160ff1b83900384128116156133c0576133c0612d00565b50500190565b60008083128015600160ff1b8501841216156133e4576133e4612d00565b6001600160ff1b03840183138116156133ff576133ff612d00565b50500390565b60006001600160ff1b038184138284138082168684048611161561342b5761342b612d00565b600160ff1b600087128281168783058912161561344a5761344a612d00565b6000871292508782058712848416161561346657613466612d00565b8785058712818416161561347c5761347c612d00565b505050929093029392505050565b60008160001904831182151516156134a4576134a4612d00565b500290565b6000826134b8576134b86132fd565b500490565b630d0e6d8560e31b8152600084516134dc81600485016020890161288a565b61016160f51b60049184019182015284516134fe81600684016020890161288a565b6201296160ed1b60069290910191820152835161352281600984016020880161288a565b61252960f01b60099290910191820152600b0195945050505050565b60008261354d5761354d6132fd565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f6b396fcf47b37b2e2e912ec837317cee9e41e634540ed8b63fd6390c73e5c2e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063aa1152ab1161007c578063aa1152ab146102bb578063b88d4fde146102c3578063c87b56dd146102d6578063de909942146102e9578063e985e9c5146102fc578063f2fde38b1461030f57600080fd5b806370a082311461026a578063715018a61461027d5780638da5cb5b1461028557806391557ac41461028d57806395d89b41146102a0578063a22cb465146102a857600080fd5b806321cbb5bd1161011557806321cbb5bd146101f857806323b872dd1461020b57806342842e0e1461021e57806342966c68146102315780636352211e146102445780636411fb451461025757600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c55780631249c58b146101da57806318160ddd146101e2575b600080fd5b61017061016b366004612866565b610322565b60405190151581526020015b60405180910390f35b61018d610374565b60405161017c91906128e2565b6101ad6101a83660046128f5565b610406565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004612923565b610493565b005b6101d86105a4565b6101ea610605565b60405190815260200161017c565b6101d8610206366004612995565b610615565b6101d8610219366004612a46565b61069a565b6101d861022c366004612a46565b6106cc565b6101d861023f3660046128f5565b6106e7565b6101ad6102523660046128f5565b610761565b6101d8610265366004612a97565b6107d8565b6101ea610278366004612b1a565b61087e565b6101d8610905565b6101ad61093e565b6101ad61029b3660046128f5565b61094d565b61018d610a24565b6101d86102b6366004612b37565b610a33565b610170610a3e565b6101d86102d1366004612b93565b610a67565b61018d6102e43660046128f5565b610a99565b61018d6102f7366004612b1a565b610c1a565b61017061030a366004612c41565b610d32565b6101d861031d366004612b1a565b610d60565b60006001600160e01b031982166380ac58cd60e01b148061035357506001600160e01b03198216635b5e139f60e01b145b8061036e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461038390612c7a565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90612c7a565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050905090565b600061041182610e06565b6104775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061049e82610761565b9050806001600160a01b0316836001600160a01b0316141561050c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161046e565b336001600160a01b038216148061052857506105288133610d32565b6105955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161046e565b61059f8383610e23565b505050565b6105ac610a3e565b6105e35760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b604482015260640161046e565b6105f5336105f060095490565b610e91565b610603600980546001019055565b565b600061061060095490565b905090565b3361061e61093e565b6001600160a01b0316146106445760405162461bcd60e51b815260040161046e90612cb5565b60005b81518110156106965761067682828151811061066557610665612cea565b60200260200101516105f060095490565b610684600980546001019055565b8061068e81612d16565b915050610647565b5050565b6106a5335b82610fbe565b6106c15760405162461bcd60e51b815260040161046e90612d31565b61059f838383611088565b61059f83838360405180602001604052806000815250610a67565b6106f03361069f565b6107555760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b606482015260840161046e565b61075e81611221565b50565b6000818152600260205260408120546001600160a01b03168061036e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161046e565b336107e161093e565b6001600160a01b0316146108075760405162461bcd60e51b815260040161046e90612cb5565b60005b8281101561087857816007600086868581811061082957610829612cea565b905060200201602081019061083e9190612b1a565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061087081612d16565b91505061080a565b50505050565b60006001600160a01b0382166108e95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b3361090e61093e565b6001600160a01b0316146109345760405162461bcd60e51b815260040161046e90612cb5565b61060360006112b6565b6006546001600160a01b031690565b6040516331a9108f60e11b81526004810182905260009081903090636352211e9060240160206040518083038186803b15801561098957600080fd5b505afa15801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c19190612d82565b6001600160a01b03811660009081526007602052604090205490915060ff168015610a0257506000838152600860205260409020546001600160a01b031615155b1561036e5750506000908152600860205260409020546001600160a01b031690565b60606001805461038390612c7a565b610696338383611308565b60006361ce6ba6421180156106105750610a5f620151806361ce6ba6612d9f565b421115905090565b610a713383610fbe565b610a8d5760405162461bcd60e51b815260040161046e90612d31565b610878848484846113d3565b6060610aa482610e06565b610adb5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b604482015260640161046e565b60405162b86e3360e51b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d01fde8c90829063170dc6609060240160006040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b7e9190810190612db7565b610b8a6102f78661094d565b604051602001610b9b929190612e49565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610bc691906128e2565b60006040518083038186803b158015610bde57600080fd5b505afa158015610bf2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036e9190810190612db7565b60606000610c2783611406565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b1996610c889691959194939201612fc5565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610cb391906128e2565b60006040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d079190810190612db7565b905080604051602001610d1a919061324f565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33610d6961093e565b6001600160a01b031614610d8f5760405162461bcd60e51b815260040161046e90612cb5565b6001600160a01b038116610df45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046e565b61075e816112b6565b80546001019055565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e5882610761565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216610ee75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b610ef081610e06565b15610f3d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b610f49600083836116ea565b6001600160a01b0382166000908152600360205260408120805460019290610f72908490612d9f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613553833981519152908290a45050565b6000610fc982610e06565b61102a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161046e565b600061103583610761565b9050806001600160a01b0316846001600160a01b031614806110705750836001600160a01b031661106584610406565b6001600160a01b0316145b8061108057506110808185610d32565b949350505050565b826001600160a01b031661109b82610761565b6001600160a01b0316146111035760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161046e565b6001600160a01b0382166111655760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6111708383836116ea565b61117b600082610e23565b6001600160a01b03831660009081526003602052604081208054600192906111a4908490613294565b90915550506001600160a01b03821660009081526003602052604081208054600192906111d2908490612d9f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061355383398151915291a4505050565b600061122c82610761565b905061123a816000846116ea565b611245600083610e23565b6001600160a01b038116600090815260036020526040812080546001929061126e908490613294565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613553833981519152908390a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156113665760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6113de848484611088565b6113ea84848484611739565b6108785760405162461bcd60e51b815260040161046e906132ab565b61140e612829565b6001600160a01b038216600060118260131a60180281611430576114306132fd565b0490506000602283601d1a6005028161144b5761144b6132fd565b046020019050606160338460171a60050281611469576114696132fd565b0401604801600281049050600060108560181a81611489576114896132fd565b04605101905060006080866015600b91901a0260ff16816114ac576114ac6132fd565b046046019050600a82038111156114c4575060091981015b6040805160a081019091528061153e6114f989601c1a60028b60191a816114ed576114ed6132fd565b0660ff168a6000611846565b61151960028b601c1a8161150f5761150f6132fd565b068787606461199a565b61153960028c601a1a8161152f5761152f6132fd565b068a8a60646119e2565b611a5a565b81526020016115ac61156c89601c1a60028b60191a81611560576115606132fd565b0660ff168a600a611846565b61158c60028b601c1a81611582576115826132fd565b068787605a61199a565b61153960028c601a1a816115a2576115a26132fd565b068a8a605a6119e2565b815260200161161a6115da89601c1a60028b60191a816115ce576115ce6132fd565b0660ff168a6046611846565b6115fa60028b601c1a816115f0576115f06132fd565b068787604661199a565b61153960028c601a1a81611610576116106132fd565b068a8a60466119e2565b815260200161168861164889601c1a60028b60191a8161163c5761163c6132fd565b0660ff168a605a611846565b61166860028b601c1a8161165e5761165e6132fd565b068787601461199a565b61153960028c601a1a8161167e5761167e6132fd565b068a8a60146119e2565b81526020016116dc6116b689601c1a60028b60191a816116aa576116aa6132fd565b0660ff168a6064611846565b6116d660028b601c1a816116cc576116cc6132fd565b068787600061199a565b88611a5a565b905298975050505050505050565b6001600160a01b03821660009081526007602052604090205460ff161561059f57600081815260086020526040902080546001600160a01b0385166001600160a01b0319909116179055505050565b60006001600160a01b0384163b1561183b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061177d903390899088908890600401613313565b602060405180830381600087803b15801561179757600080fd5b505af19250505080156117c7575060408051601f3d908101601f191682019092526117c491810190613346565b60015b611821573d8080156117f5576040519150601f19603f3d011682016040523d82523d6000602084013e6117fa565b606091505b5080516118195760405162461bcd60e51b815260040161046e906132ab565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611080565b506001949350505050565b600080611854600487613363565b60ff16905083816118c1576118b886156118785761187382600a613385565b611883565b611883600a836133c6565b6118909060ff8716613405565b8261189f60ff881660646133c6565b6118a99190613405565b6118b39190613385565b611aa1565b92505050611080565b81600114156118e9576118b886156118de5761187382601e613385565b611883601e836133c6565b8160021415611944576118b8861561190b57611906826032613385565b611916565b6119166032836133c6565b6119228660ff16611ad4565b61192c9190613405565b826119398760ff16611ad4565b61189f9060646133c6565b61198f60808860ff161161195957600061195c565b60015b60ff16871561196c57603c611970565b603b195b61197a9190613405565b6119849083613385565b61191690601e613385565b979650505050505050565b60008060ff86166119ca576119ae83611fca565b60ff169050606481810386028583020104600101915050611080565b50816064818103860285830201049695505050505050565b60008060ff8616611a00576119f683611fca565b60ff169050611a0f565b611a0983612326565b60ff1690505b6064611a1b858361348a565b86611a27846064613294565b611a31919061348a565b611a3b9190612d9f565b611a4591906134a9565b611a50906001612d9f565b9695505050505050565b6060611a658461272c565b611a6e8461272c565b611a778461272c565b604051602001611a89939291906134bd565b60405160208183030381529060405290509392505050565b606490056000808212611aba57610168825b0692915050565b610168826000190281611ab357611ab36132fd565b919050565b6000600d8261ffff161015611aeb57506000919050565b60118261ffff161015611b0057506001919050565b60138261ffff161015611b1557506002919050565b60158261ffff161015611b2a57506003919050565b60178261ffff161015611b3f57506004919050565b60188261ffff161015611b5457506005919050565b60198261ffff161015611b6957506006919050565b601b8261ffff161015611b7e57506007919050565b601c8261ffff161015611b9357506008919050565b601d8261ffff161015611ba857506009919050565b601e8261ffff161015611bbd5750600a919050565b601f8261ffff161015611bd25750600b919050565b60208261ffff161015611be75750600d919050565b60218261ffff161015611bfc5750600e919050565b60228261ffff161015611c115750600f919050565b60238261ffff161015611c2657506011919050565b60248261ffff161015611c3b57506012919050565b60258261ffff161015611c5057506014919050565b60268261ffff161015611c6557506015919050565b60278261ffff161015611c7a57506017919050565b60288261ffff161015611c8f57506019919050565b60298261ffff161015611ca45750601b919050565b602a8261ffff161015611cb95750601d919050565b602b8261ffff161015611cce5750601f919050565b602c8261ffff161015611ce357506022919050565b602d8261ffff161015611cf857506024919050565b602e8261ffff161015611d0d57506026919050565b602f8261ffff161015611d2257506029919050565b60308261ffff161015611d375750602c919050565b60318261ffff161015611d4c5750602f919050565b60328261ffff161015611d6157506032919050565b60338261ffff161015611d7657506034919050565b60348261ffff161015611d8b57506037919050565b60358261ffff161015611da05750603a919050565b60368261ffff161015611db55750603d919050565b60378261ffff161015611dca5750603f919050565b60388261ffff161015611ddf57506041919050565b60398261ffff161015611df457506044919050565b603a8261ffff161015611e0957506046919050565b603b8261ffff161015611e1e57506048919050565b603c8261ffff161015611e335750604a919050565b603d8261ffff161015611e485750604c919050565b603e8261ffff161015611e5d5750604e919050565b603f8261ffff161015611e725750604f919050565b60408261ffff161015611e8757506051919050565b60418261ffff161015611e9c57506052919050565b60428261ffff161015611eb157506054919050565b60438261ffff161015611ec657506055919050565b60448261ffff161015611edb57506056919050565b60458261ffff161015611ef057506058919050565b60468261ffff161015611f0557506059919050565b60478261ffff161015611f1a5750605a919050565b60488261ffff161015611f2f5750605b919050565b604a8261ffff161015611f445750605c919050565b604b8261ffff161015611f595750605d919050565b604c8261ffff161015611f6e5750605e919050565b604e8261ffff161015611f835750605f919050565b60508261ffff161015611f9857506060919050565b60528261ffff161015611fad57506061919050565b60568261ffff161015611fc257506062919050565b506063919050565b60006027821015611fdd57506000919050565b602d821015611fee57506001919050565b6031821015611fff57506002919050565b603482101561201057506003919050565b603582101561202157506004919050565b603682101561203257506004919050565b603782101561204357506005919050565b603882101561205457506005919050565b603982101561206557506006919050565b603a82101561207657506006919050565b603b82101561208757506007919050565b603c82101561209857506007919050565b603d8210156120a957506008919050565b603e8210156120ba57506009919050565b603f8210156120cb57506009919050565b60408210156120dc5750600a919050565b60418210156120ed5750600b919050565b60428210156120fe5750600c919050565b604382101561210f5750600d919050565b60448210156121205750600e919050565b60458210156121315750600f919050565b604682101561214257506010919050565b604782101561215357506012919050565b604882101561216457506013919050565b604982101561217557506014919050565b604a82101561218657506016919050565b604b82101561219757506017919050565b604c8210156121a857506019919050565b604d8210156121b95750601b919050565b604e8210156121ca5750601c919050565b604f8210156121db5750601e919050565b60508210156121ec57506020919050565b60518210156121fd57506022919050565b605282101561220e57506025919050565b605382101561221f57506027919050565b605482101561223057506029919050565b60558210156122415750602c919050565b60568210156122525750602f919050565b605782101561226357506031919050565b605882101561227457506034919050565b605982101561228557506037919050565b605a8210156122965750603b919050565b605b8210156122a75750603e919050565b605c8210156122b857506041919050565b605d8210156122c957506045919050565b605e8210156122da57506049919050565b605f8210156122eb5750604d919050565b60608210156122fc57506051919050565b606182101561230d57506055919050565b606282101561231e5750605a919050565b50605f919050565b6000601682101561233957506000919050565b601c82101561234a57506001919050565b602082101561235b57506002919050565b602082101561236c57506003919050565b602282101561237d57506003919050565b602482101561238e57506004919050565b602782101561239f57506005919050565b60298210156123b057506006919050565b602b8210156123c157506007919050565b602e8210156123d257506009919050565b602f8210156123e35750600a919050565b60318210156123f45750600b919050565b60328210156124055750600c919050565b60338210156124165750600d919050565b60358210156124275750600e919050565b60368210156124385750600f919050565b603782101561244957506010919050565b603882101561245a57506011919050565b603982101561246b57506012919050565b603a82101561247c57506013919050565b603b82101561248d57506014919050565b603c82101561249e57506015919050565b603d8210156124af57506016919050565b603e8210156124c057506017919050565b603f8210156124d157506019919050565b60408210156124e25750601a919050565b60418210156124f35750601b919050565b60428210156125045750601c919050565b60438210156125155750601e919050565b60448210156125265750601f919050565b604582101561253757506020919050565b604682101561254857506022919050565b604782101561255957506023919050565b604882101561256a57506025919050565b604982101561257b57506026919050565b604a82101561258c57506028919050565b604b82101561259d5750602a919050565b604c8210156125ae5750602b919050565b604d8210156125bf5750602d919050565b604e8210156125d05750602f919050565b604f8210156125e157506031919050565b60508210156125f257506033919050565b605182101561260357506035919050565b605282101561261457506037919050565b605382101561262557506039919050565b60548210156126365750603b919050565b60558210156126475750603d919050565b60568210156126585750603f919050565b605782101561266957506041919050565b605882101561267a57506044919050565b605982101561268b57506046919050565b605a82101561269c57506048919050565b605b8210156126ad5750604b919050565b605c8210156126be5750604d919050565b605d8210156126cf57506050919050565b605e8210156126e057506053919050565b605f8210156126f157506055919050565b606082101561270257506058919050565b60618210156127135750605b919050565b60628210156127245750605e919050565b506061919050565b6060816127505750506040805180820190915260018152600360fc1b602082015290565b8160005b811561277a578061276481612d16565b91506127739050600a836134a9565b9150612754565b6000816001600160401b038111156127945761279461294f565b6040519080825280601f01601f1916602001820160405280156127be576020820181803683370190505b5090505b8415611080576127d3600183613294565b91506127e0600a8661353e565b6127eb906030612d9f565b60f81b81838151811061280057612800612cea565b60200101906001600160f81b031916908160001a905350612822600a866134a9565b94506127c2565b6040518060a001604052806005905b60608152602001906001900390816128385790505090565b6001600160e01b03198116811461075e57600080fd5b60006020828403121561287857600080fd5b813561288381612850565b9392505050565b60005b838110156128a557818101518382015260200161288d565b838111156108785750506000910152565b600081518084526128ce81602086016020860161288a565b601f01601f19169290920160200192915050565b60208152600061288360208301846128b6565b60006020828403121561290757600080fd5b5035919050565b6001600160a01b038116811461075e57600080fd5b6000806040838503121561293657600080fd5b82356129418161290e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561298d5761298d61294f565b604052919050565b600060208083850312156129a857600080fd5b82356001600160401b03808211156129bf57600080fd5b818501915085601f8301126129d357600080fd5b8135818111156129e5576129e561294f565b8060051b91506129f6848301612965565b8181529183018401918481019088841115612a1057600080fd5b938501935b83851015612a3a5784359250612a2a8361290e565b8282529385019390850190612a15565b98975050505050505050565b600080600060608486031215612a5b57600080fd5b8335612a668161290e565b92506020840135612a768161290e565b929592945050506040919091013590565b80358015158114611acf57600080fd5b600080600060408486031215612aac57600080fd5b83356001600160401b0380821115612ac357600080fd5b818601915086601f830112612ad757600080fd5b813581811115612ae657600080fd5b8760208260051b8501011115612afb57600080fd5b602092830195509350612b119186019050612a87565b90509250925092565b600060208284031215612b2c57600080fd5b81356128838161290e565b60008060408385031215612b4a57600080fd5b8235612b558161290e565b9150612b6360208401612a87565b90509250929050565b60006001600160401b03821115612b8557612b8561294f565b50601f01601f191660200190565b60008060008060808587031215612ba957600080fd5b8435612bb48161290e565b93506020850135612bc48161290e565b92506040850135915060608501356001600160401b03811115612be657600080fd5b8501601f81018713612bf757600080fd5b8035612c0a612c0582612b6c565b612965565b818152886020838501011115612c1f57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612c5457600080fd5b8235612c5f8161290e565b91506020830135612c6f8161290e565b809150509250929050565b600181811c90821680612c8e57607f821691505b60208210811415612caf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d2a57612d2a612d00565b5060010190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208284031215612d9457600080fd5b81516128838161290e565b60008219821115612db257612db2612d00565b500190565b600060208284031215612dc957600080fd5b81516001600160401b03811115612ddf57600080fd5b8201601f81018413612df057600080fd5b8051612dfe612c0582612b6c565b818152856020838501011115612e1357600080fd5b612e2482602083016020860161288a565b95945050505050565b60008151612e3f81856020860161288a565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090612e7a81601585016020880161288a565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351612fae8160fc84016020880161288a565b611a5060fc8284010161227d60f01b815260020190565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032323020323230223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236362e343625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b608082015260008651613090816098850160208b0161288a565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b8820181905287516130de8160be850160208c0161288a565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de820152612a3a6131a461319e61316861316261312a60e487018c612e2d565b7f22202f3e3c73746f70206f66667365743d2239302e363325222073746f702d6381526537b637b91e9160d11b602082015260260190565b89612e2d565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86612e2d565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c67207481527f72616e73666f726d3d227472616e736c61746528313020313029207363616c6560208201527f28302e3929223e3c636972636c652063783d22353025222063793d223530252260408201527f20723d22353025222066696c6c3d2275726c2823677261642922202f3e3c2f676060820152661f1e17b9bb339f60c91b608082015260870190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161328781601a85016020870161288a565b91909101601a0192915050565b6000828210156132a6576132a6612d00565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a50908301846128b6565b60006020828403121561335857600080fd5b815161288381612850565b600060ff831680613376576133766132fd565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156133a7576133a7612d00565b600160ff1b83900384128116156133c0576133c0612d00565b50500190565b60008083128015600160ff1b8501841216156133e4576133e4612d00565b6001600160ff1b03840183138116156133ff576133ff612d00565b50500390565b60006001600160ff1b038184138284138082168684048611161561342b5761342b612d00565b600160ff1b600087128281168783058912161561344a5761344a612d00565b6000871292508782058712848416161561346657613466612d00565b8785058712818416161561347c5761347c612d00565b505050929093029392505050565b60008160001904831182151516156134a4576134a4612d00565b500290565b6000826134b8576134b86132fd565b500490565b630d0e6d8560e31b8152600084516134dc81600485016020890161288a565b61016160f51b60049184019182015284516134fe81600684016020890161288a565b6201296160ed1b60069290910191820152835161352281600984016020880161288a565b61252960f01b60099290910191820152600b0195945050505050565b60008261354d5761354d6132fd565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f6b396fcf47b37b2e2e912ec837317cee9e41e634540ed8b63fd6390c73e5c2e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This custom NFT contract stores additional metadata to use for tokenURI",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 333,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 339,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 343,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 347,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 353,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 210,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4426,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "knownMarketplace",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4430,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "lastOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4433,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)1654_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1654_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1653,
            "contract": "contracts/ZorbNFT.sol:ZorbNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}