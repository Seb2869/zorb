{
  "address": "0xd70E10Cff7450BEfC708eDb47E14eA5D47a9186C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "baseFactory",
          "type": "address"
        },
        {
          "internalType": "contract IPublicSharedMetadata",
          "name": "_sharedMetadata",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "adminMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "zorbForAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x61e9e5908835f64b976b5376564da0c63aa898bafc48662a7dd3aacdae887da7",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0xd70E10Cff7450BEfC708eDb47E14eA5D47a9186C",
    "transactionIndex": 48,
    "gasUsed": "2190962",
    "logsBloom": "0x
    "blockHash": "0xc6e785c0af47947b2bd4f5ba009b701edcea1d169d5347516f3f3be315f8cca6",
    "transactionHash": "0x61e9e5908835f64b976b5376564da0c63aa898bafc48662a7dd3aacdae887da7",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 9903477,
        "transactionHash": "0x61e9e5908835f64b976b5376564da0c63aa898bafc48662a7dd3aacdae887da7",
        "address": "0xd70E10Cff7450BEfC708eDb47E14eA5D47a9186C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0xc6e785c0af47947b2bd4f5ba009b701edcea1d169d5347516f3f3be315f8cca6"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 9903477,
        "transactionHash": "0x61e9e5908835f64b976b5376564da0c63aa898bafc48662a7dd3aacdae887da7",
        "address": "0xd70E10Cff7450BEfC708eDb47E14eA5D47a9186C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0xc6e785c0af47947b2bd4f5ba009b701edcea1d169d5347516f3f3be315f8cca6"
      }
    ],
    "blockNumber": 9903477,
    "cumulativeGasUsed": "10206566",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86c67a16C16BF784BdFE7D4b7575dB664D191F88",
    "0x2a3245d54E5407E276c47f0C181a22bf90c797Ce"
  ],
  "solcInputHash": "e3eee1fab09b81e4de6aee77fbed220b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseFactory\",\"type\":\"address\"},{\"internalType\":\"contract IPublicSharedMetadata\",\"name\":\"_sharedMetadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"zorbForAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This custom NFT contract stores additional metadata to use for tokenURI\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZorbNFT.sol\":\"ZorbNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x34a68a6915f19a764a8ce8e6fdc6bf259744a6142afe478072ada07d65cf65d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/ColorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nlibrary ColorLib {\\n    struct HSL {\\n        uint256 h;\\n        uint256 s;\\n        uint256 l;\\n    }\\n\\n    function cubicInOut(uint16 p) internal pure returns (int256) {\\n        if (p < 13) {\\n            return 0;\\n        }\\n        if (p < 17) {\\n            return 1;\\n        }\\n        if (p < 19) {\\n            return 2;\\n        }\\n        if (p < 21) {\\n            return 3;\\n        }\\n        if (p < 23) {\\n            return 4;\\n        }\\n        if (p < 24) {\\n            return 5;\\n        }\\n        if (p < 25) {\\n            return 6;\\n        }\\n        if (p < 27) {\\n            return 7;\\n        }\\n        if (p < 28) {\\n            return 8;\\n        }\\n        if (p < 29) {\\n            return 9;\\n        }\\n        if (p < 30) {\\n            return 10;\\n        }\\n        if (p < 31) {\\n            return 11;\\n        }\\n        if (p < 32) {\\n            return 13;\\n        }\\n        if (p < 33) {\\n            return 14;\\n        }\\n        if (p < 34) {\\n            return 15;\\n        }\\n        if (p < 35) {\\n            return 17;\\n        }\\n        if (p < 36) {\\n            return 18;\\n        }\\n        if (p < 37) {\\n            return 20;\\n        }\\n        if (p < 38) {\\n            return 21;\\n        }\\n        if (p < 39) {\\n            return 23;\\n        }\\n        if (p < 40) {\\n            return 25;\\n        }\\n        if (p < 41) {\\n            return 27;\\n        }\\n        if (p < 42) {\\n            return 29;\\n        }\\n        if (p < 43) {\\n            return 31;\\n        }\\n        if (p < 44) {\\n            return 34;\\n        }\\n        if (p < 45) {\\n            return 36;\\n        }\\n        if (p < 46) {\\n            return 38;\\n        }\\n        if (p < 47) {\\n            return 41;\\n        }\\n        if (p < 48) {\\n            return 44;\\n        }\\n        if (p < 49) {\\n            return 47;\\n        }\\n        if (p < 50) {\\n            return 50;\\n        }\\n        if (p < 51) {\\n            return 52;\\n        }\\n        if (p < 52) {\\n            return 55;\\n        }\\n        if (p < 53) {\\n            return 58;\\n        }\\n        if (p < 54) {\\n            return 61;\\n        }\\n        if (p < 55) {\\n            return 63;\\n        }\\n        if (p < 56) {\\n            return 65;\\n        }\\n        if (p < 57) {\\n            return 68;\\n        }\\n        if (p < 58) {\\n            return 70;\\n        }\\n        if (p < 59) {\\n            return 72;\\n        }\\n        if (p < 60) {\\n            return 74;\\n        }\\n        if (p < 61) {\\n            return 76;\\n        }\\n        if (p < 62) {\\n            return 78;\\n        }\\n        if (p < 63) {\\n            return 79;\\n        }\\n        if (p < 64) {\\n            return 81;\\n        }\\n        if (p < 65) {\\n            return 82;\\n        }\\n        if (p < 66) {\\n            return 84;\\n        }\\n        if (p < 67) {\\n            return 85;\\n        }\\n        if (p < 68) {\\n            return 86;\\n        }\\n        if (p < 69) {\\n            return 88;\\n        }\\n        if (p < 70) {\\n            return 89;\\n        }\\n        if (p < 71) {\\n            return 90;\\n        }\\n        if (p < 72) {\\n            return 91;\\n        }\\n        if (p < 74) {\\n            return 92;\\n        }\\n        if (p < 75) {\\n            return 93;\\n        }\\n        if (p < 76) {\\n            return 94;\\n        }\\n        if (p < 78) {\\n            return 95;\\n        }\\n        if (p < 80) {\\n            return 96;\\n        }\\n        if (p < 82) {\\n            return 97;\\n        }\\n        if (p < 86) {\\n            return 98;\\n        }\\n        return 99;\\n    }\\n\\n    function cubicIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 22) {\\n            return 0;\\n        }\\n        if (p < 28) {\\n            return 1;\\n        }\\n        if (p < 32) {\\n            return 2;\\n        }\\n        if (p < 32) {\\n            return 3;\\n        }\\n        if (p < 34) {\\n            return 3;\\n        }\\n        if (p < 36) {\\n            return 4;\\n        }\\n        if (p < 39) {\\n            return 5;\\n        }\\n        if (p < 41) {\\n            return 6;\\n        }\\n        if (p < 43) {\\n            return 7;\\n        }\\n        if (p < 46) {\\n            return 9;\\n        }\\n        if (p < 47) {\\n            return 10;\\n        }\\n        if (p < 49) {\\n            return 11;\\n        }\\n        if (p < 50) {\\n            return 12;\\n        }\\n        if (p < 51) {\\n            return 13;\\n        }\\n        if (p < 53) {\\n            return 14;\\n        }\\n        if (p < 54) {\\n            return 15;\\n        }\\n        if (p < 55) {\\n            return 16;\\n        }\\n        if (p < 56) {\\n            return 17;\\n        }\\n        if (p < 57) {\\n            return 18;\\n        }\\n        if (p < 58) {\\n            return 19;\\n        }\\n        if (p < 59) {\\n            return 20;\\n        }\\n        if (p < 60) {\\n            return 21;\\n        }\\n        if (p < 61) {\\n            return 22;\\n        }\\n        if (p < 62) {\\n            return 23;\\n        }\\n        if (p < 63) {\\n            return 25;\\n        }\\n        if (p < 64) {\\n            return 26;\\n        }\\n        if (p < 65) {\\n            return 27;\\n        }\\n        if (p < 66) {\\n            return 28;\\n        }\\n        if (p < 67) {\\n            return 30;\\n        }\\n        if (p < 68) {\\n            return 31;\\n        }\\n        if (p < 69) {\\n            return 32;\\n        }\\n        if (p < 70) {\\n            return 34;\\n        }\\n        if (p < 71) {\\n            return 35;\\n        }\\n        if (p < 72) {\\n            return 37;\\n        }\\n        if (p < 73) {\\n            return 38;\\n        }\\n        if (p < 74) {\\n            return 40;\\n        }\\n        if (p < 75) {\\n            return 42;\\n        }\\n        if (p < 76) {\\n            return 43;\\n        }\\n        if (p < 77) {\\n            return 45;\\n        }\\n        if (p < 78) {\\n            return 47;\\n        }\\n        if (p < 79) {\\n            return 49;\\n        }\\n        if (p < 80) {\\n            return 51;\\n        }\\n        if (p < 81) {\\n            return 53;\\n        }\\n        if (p < 82) {\\n            return 55;\\n        }\\n        if (p < 83) {\\n            return 57;\\n        }\\n        if (p < 84) {\\n            return 59;\\n        }\\n        if (p < 85) {\\n            return 61;\\n        }\\n        if (p < 86) {\\n            return 63;\\n        }\\n        if (p < 87) {\\n            return 65;\\n        }\\n        if (p < 88) {\\n            return 68;\\n        }\\n        if (p < 89) {\\n            return 70;\\n        }\\n        if (p < 90) {\\n            return 72;\\n        }\\n        if (p < 91) {\\n            return 75;\\n        }\\n        if (p < 92) {\\n            return 77;\\n        }\\n        if (p < 93) {\\n            return 80;\\n        }\\n        if (p < 94) {\\n            return 83;\\n        }\\n        if (p < 95) {\\n            return 85;\\n        }\\n        if (p < 96) {\\n            return 88;\\n        }\\n        if (p < 97) {\\n            return 91;\\n        }\\n        if (p < 98) {\\n            return 94;\\n        }\\n        return 97;\\n    }\\n\\n    function quintIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 39) {\\n            return 0;\\n        }\\n        if (p < 45) {\\n            return 1;\\n        }\\n        if (p < 49) {\\n            return 2;\\n        }\\n        if (p < 52) {\\n            return 3;\\n        }\\n        if (p < 53) {\\n            return 4;\\n        }\\n        if (p < 54) {\\n            return 4;\\n        }\\n        if (p < 55) {\\n            return 5;\\n        }\\n        if (p < 56) {\\n            return 5;\\n        }\\n        if (p < 57) {\\n            return 6;\\n        }\\n        if (p < 58) {\\n            return 6;\\n        }\\n        if (p < 59) {\\n            return 7;\\n        }\\n        if (p < 60) {\\n            return 7;\\n        }\\n        if (p < 61) {\\n            return 8;\\n        }\\n        if (p < 62) {\\n            return 9;\\n        }\\n        if (p < 63) {\\n            return 9;\\n        }\\n        if (p < 64) {\\n            return 10;\\n        }\\n        if (p < 65) {\\n            return 11;\\n        }\\n        if (p < 66) {\\n            return 12;\\n        }\\n        if (p < 67) {\\n            return 13;\\n        }\\n        if (p < 68) {\\n            return 14;\\n        }\\n        if (p < 69) {\\n            return 15;\\n        }\\n        if (p < 70) {\\n            return 16;\\n        }\\n        if (p < 71) {\\n            return 18;\\n        }\\n        if (p < 72) {\\n            return 19;\\n        }\\n        if (p < 73) {\\n            return 20;\\n        }\\n        if (p < 74) {\\n            return 22;\\n        }\\n        if (p < 75) {\\n            return 23;\\n        }\\n        if (p < 76) {\\n            return 25;\\n        }\\n        if (p < 77) {\\n            return 27;\\n        }\\n        if (p < 78) {\\n            return 28;\\n        }\\n        if (p < 79) {\\n            return 30;\\n        }\\n        if (p < 80) {\\n            return 32;\\n        }\\n        if (p < 81) {\\n            return 34;\\n        }\\n        if (p < 82) {\\n            return 37;\\n        }\\n        if (p < 83) {\\n            return 39;\\n        }\\n        if (p < 84) {\\n            return 41;\\n        }\\n        if (p < 85) {\\n            return 44;\\n        }\\n        if (p < 86) {\\n            return 47;\\n        }\\n        if (p < 87) {\\n            return 49;\\n        }\\n        if (p < 88) {\\n            return 52;\\n        }\\n        if (p < 89) {\\n            return 55;\\n        }\\n        if (p < 90) {\\n            return 59;\\n        }\\n        if (p < 91) {\\n            return 62;\\n        }\\n        if (p < 92) {\\n            return 65;\\n        }\\n        if (p < 93) {\\n            return 69;\\n        }\\n        if (p < 94) {\\n            return 73;\\n        }\\n        if (p < 95) {\\n            return 77;\\n        }\\n        if (p < 96) {\\n            return 81;\\n        }\\n        if (p < 97) {\\n            return 85;\\n        }\\n        if (p < 98) {\\n            return 90;\\n        }\\n        return 95;\\n    }\\n\\n    // Util for keeping hue range in 0-360 positive\\n    function clampHue(int256 h) internal pure returns (uint256) {\\n        unchecked {\\n            h /= 100;\\n            if (h >= 0) {\\n                return uint256(h) % 360;\\n            } else {\\n                return (uint256(-1 * h) % 360);\\n            }\\n        }\\n    }\\n\\n    function lerpHue(\\n        uint8 optionNum,\\n        uint256 direction,\\n        uint256 uhue,\\n        uint8 pct\\n    ) internal pure returns (uint256) {\\n        // unchecked {\\n        uint256 option = optionNum % 4;\\n        int256 hue = int256(uhue);\\n\\n        if (option == 0) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 10 : hue + 10)))\\n                );\\n        }\\n        if (option == 1) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 30 : hue + 30)))\\n                );\\n        }\\n        if (option == 2) {\\n            return\\n                clampHue(\\n                    (\\n                        (((100 - cubicInOut(pct)) * hue) +\\n                            (cubicInOut(pct) *\\n                                (direction == 0 ? hue - 50 : hue + 50)))\\n                    )\\n                );\\n        }\\n\\n        return\\n            clampHue(\\n                ((100 - cubicInOut(pct)) * hue) +\\n                    (cubicInOut(pct) *\\n                        int256(\\n                            hue +\\n                                ((direction == 0 ? int256(-60) : int256(60)) *\\n                                    int256(uint256(optionNum > 128 ? 1 : 0))) +\\n                                30\\n                        ))\\n            );\\n        // }\\n    }\\n\\n    function lerpLightness(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        uint256 lerpPercent;\\n        if (optionNum == 0) {\\n            lerpPercent = quintIn(pct);\\n        } else {\\n            lerpPercent = cubicIn(pct);\\n        }\\n        return\\n            1 + (((100.0 - lerpPercent) * start + (lerpPercent * end)) / 100);\\n    }\\n\\n    function lerpSaturation(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 lerpPercent;\\n            if (optionNum == 0) {\\n                lerpPercent = quintIn(pct);\\n                return\\n                    1 +\\n                    (((100.0 - lerpPercent) * start + lerpPercent * end) / 100);\\n            }\\n            lerpPercent = pct;\\n            return ((100.0 - lerpPercent) * start + lerpPercent * end) / 100;\\n        }\\n    }\\n\\n    function encodeStr(\\n        uint256 h,\\n        uint256 s,\\n        uint256 l\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"hsl(\\\",\\n                StringsUpgradeable.toString(h),\\n                \\\", \\\",\\n                StringsUpgradeable.toString(s),\\n                \\\"%, \\\",\\n                StringsUpgradeable.toString(l),\\n                \\\"%)\\\"\\n            );\\n    }\\n\\n    function gradientForAddress(address addr)\\n        internal\\n        pure\\n        returns (bytes[5] memory)\\n    {\\n        unchecked {\\n            bytes32 addrBytes = bytes32(uint256(uint160(addr)));\\n            uint256 startHue = (uint256(uint8(addrBytes[31 - 12])) * 24) / 17; // 255 - 360\\n            uint256 startLightness = (uint256(uint8(addrBytes[31 - 2])) * 5) /\\n                34 +\\n                32; // 255 => 37.5 + 32 (32, 69.5)\\n            uint256 endLightness = 97;\\n            endLightness += (((uint256(uint8(addrBytes[31 - 8])) * 5) / 51) +\\n                72); // 72-97\\n            endLightness /= 2;\\n\\n            uint256 startSaturation = uint256(uint8(addrBytes[31 - 7])) /\\n                16 +\\n                81; // 0-16 + 72\\n\\n            uint256 endSaturation = uint256(uint8(addrBytes[31 - 10]) * 11) / 128 + 70; // 0-22 + 70\\n            if (endSaturation > startSaturation - 10) {\\n                endSaturation = startSaturation - 10;\\n            }\\n\\n            return [\\n                // 0\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        0\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        100\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        100\\n                    )\\n                ),\\n                // 1\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        10\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        90\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        90\\n                    )\\n                ),\\n                // 2\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        70\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        70\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        70\\n                    )\\n                ),\\n                // 3\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        90\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        20\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        20\\n                    )\\n                ),\\n                // 4\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        100\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        0\\n                    ),\\n                    startLightness\\n                )\\n            ];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb22dd0a2d429fcc4763e8762ad5f3b2151a5e3ee388e1af479c812700c80ef9f\",\"license\":\"GPL-3.0\"},\"contracts/ZorbNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {IBaseERC721Interface, ConfigSettings} from \\\"gwei-slim-nft-contracts/contracts/base/ERC721Base.sol\\\";\\nimport {ERC721Delegated} from \\\"gwei-slim-nft-contracts/contracts/base/ERC721Delegated.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {ColorLib} from \\\"./ColorLib.sol\\\";\\n\\ninterface INFT {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\n/// This custom NFT contract stores additional metadata to use for tokenURI\\ncontract ZorbNFT is ERC721Delegated {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // new years 2022 base\\n    uint256 private constant MINT_START_AT = 1609459200;\\n    uint256 private constant MINT_DURATION = 24 hours;\\n\\n    CountersUpgradeable.Counter currentTokenId;\\n    IPublicSharedMetadata private immutable sharedMetadata;\\n\\n    constructor(address baseFactory, IPublicSharedMetadata _sharedMetadata)\\n        ERC721Delegated(\\n            baseFactory,\\n            \\\"Zorbs\\\",\\n            \\\"ZORB\\\",\\n            ConfigSettings({\\n                royaltyBps: 0,\\n                uriBase: \\\"\\\",\\n                uriExtension: \\\"\\\",\\n                hasTransferHook: false\\n            })\\n        )\\n    {\\n        sharedMetadata = _sharedMetadata;\\n        currentTokenId.increment();\\n    }\\n\\n    function mintIsOpen() public view returns (bool) {\\n        return\\n            block.timestamp > MINT_START_AT &&\\n            block.timestamp <= MINT_START_AT + MINT_DURATION;\\n    }\\n\\n    function mint() public {\\n        require(mintIsOpen(), \\\"not open\\\");\\n        _mint(msg.sender, currentTokenId.current());\\n        currentTokenId.increment();\\n    }\\n\\n    function adminMint(address to) onlyOwner public {\\n        _mint(to, currentTokenId.current());\\n        currentTokenId.increment();\\n    }\\n\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Only approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function zorbForAddress(address user) public view returns (string memory) {\\n        bytes[5] memory colors = ColorLib.gradientForAddress(user);\\n        string memory encoded = sharedMetadata.base64Encode(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 200 200\\\"><defs>'\\n                '<radialGradient fx=\\\"64.96%\\\" fy=\\\"24.36%\\\" id=\\\"grad\\\">'\\n                '<stop offset=\\\"15.62%\\\" stop-color=\\\"',\\n                colors[0],\\n                '\\\" /><stop offset=\\\"39.58%\\\" stop-color=\\\"',\\n                colors[1],\\n                '\\\" /><stop offset=\\\"72.92%\\\" stop-color=\\\"',\\n                colors[2],\\n                '\\\" /><stop offset=\\\"90.62%\\\" stop-color=\\\"',\\n                colors[3],\\n                '\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"',\\n                colors[4],\\n                '\\\" /></radialGradient></defs>'\\n                '<circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"50%\\\" fill=\\\"url(#grad)\\\" />'\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", encoded));\\n    }\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            sharedMetadata.encodeMetadataJSON(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\"Zora Zorb #',\\n                    StringsUpgradeable.toString(tokenId),\\n                    '\\\", \\\"description\\\": \\\"Zora Zorb New Years Drop 2022',\\n                    '\\\\\\\\n\\\\\\\\nCelebrate Zora with your own unique Zorb\\\\\\\\n\\\\\\\\n[https://zorb.dev/](zorb.dev)\\\\\\\\n\\\\\\\\nWhen Zorbs are sold or transferred, they update to reflect the zorb of the current owner.\\\", \\\"image\\\": \\\"',\\n                    zorbForAddress(INFT(address(this)).ownerOf(tokenId)),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xca0a4592e642d87973b92bfa4651a54755d2d62dcfd195f5b1b64eb1206e734d\",\"license\":\"GPL-3.0\"},\"gwei-slim-nft-contracts/contracts/base/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {IBaseERC721Interface} from \\\"./IBaseERC721Interface.sol\\\";\\n\\nstruct ConfigSettings {\\n    uint16 royaltyBps;\\n    string uriBase;\\n    string uriExtension;\\n    bool hasTransferHook;\\n}\\n\\n/**\\n    This smart contract adds features and allows for a ownership only by another smart contract as fallback behavior\\n    while also implementing all normal ERC721 functions as expected\\n*/\\ncontract ERC721Base is\\n    ERC721Upgradeable,\\n    IBaseERC721Interface,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    // Minted counter for totalSupply()\\n    CountersUpgradeable.Counter private mintedCounter;\\n\\n    modifier onlyInternal() {\\n        require(msg.sender == address(this), \\\"Only internal\\\");\\n        _;\\n    }\\n\\n    /// on-chain record of when this contract was deployed\\n    uint256 public immutable deployedBlock;\\n\\n    ConfigSettings public advancedConfig;\\n\\n    /// Constructor called once when the base contract is deployed\\n    constructor() {\\n        // Can be used to verify contract implementation is correct at address\\n        deployedBlock = block.number;\\n    }\\n\\n    /// Initializer that's called when a new child nft is setup\\n    /// @param newOwner Owner for the new derived nft\\n    /// @param _name name of NFT contract\\n    /// @param _symbol symbol of NFT contract\\n    /// @param settings configuration settings for uri, royalty, and hooks features\\n    function initialize(\\n        address newOwner,\\n        string memory _name,\\n        string memory _symbol,\\n        ConfigSettings memory settings\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n\\n        advancedConfig = settings;\\n\\n        transferOwnership(newOwner);\\n    }\\n\\n    /// Getter to expose appoval status to root contract\\n    function isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            ERC721Upgradeable.isApprovedForAll(_owner, operator) ||\\n            operator == address(this);\\n    }\\n\\n    /// internal getter for approval by all\\n    /// When isApprovedForAll is overridden, this can be used to call original impl\\n    function __isApprovedForAll(address _owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return isApprovedForAll(_owner, operator);\\n    }\\n\\n    /// Hook that when enabled manually calls _beforeTokenTransfer on\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        if (advancedConfig.hasTransferHook) {\\n            (bool success, ) = address(this).delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"_beforeTokenTransfer(address,address,uint256)\\\",\\n                    from,\\n                    to,\\n                    tokenId\\n                )\\n            );\\n            // Raise error again from result if error exists\\n            assembly {\\n                switch success\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Internal-only function to update the base uri\\n    function __setBaseURI(string memory uriBase, string memory uriExtension)\\n        public\\n        override\\n        onlyInternal\\n    {\\n        advancedConfig.uriBase = uriBase;\\n        advancedConfig.uriExtension = uriExtension;\\n    }\\n\\n    /// @dev returns the number of minted tokens\\n    /// uses some extra gas but makes etherscan and users happy so :shrug:\\n    /// partial erc721enumerable implemntation\\n    function totalSupply() public view returns (uint256) {\\n        return mintedCounter.current();\\n    }\\n\\n    /**\\n      Internal-only\\n      @param to address to send the newly minted NFT to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function __mint(address to, uint256 tokenId)\\n        external\\n        override\\n        onlyInternal\\n    {\\n        _mint(to, tokenId);\\n        mintedCounter.increment();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not allowed\\\");\\n        _burn(tokenId);\\n        mintedCounter.decrement();\\n    }\\n\\n    /// Internal only\\n    function __burn(uint256 tokenId) public onlyInternal {\\n        _burn(tokenId);\\n        mintedCounter.decrement();\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /// internal alias for overrides\\n    function __owner()\\n        public\\n        view\\n        override(IBaseERC721Interface)\\n        returns (address)\\n    {\\n        return owner();\\n    }\\n\\n    /// Get royalty information for token\\n    /// ignored token id to get royalty info. able to override and set per-token royalties\\n    /// @param _salePrice sales price for token to determine royalty split\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        // If ownership is revoked, don't set royalties.\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * advancedConfig.royaltyBps) / 10_000);\\n    }\\n\\n    /// Default simple token-uri implementation. works for ipfs folders too\\n    /// @param tokenId token id ot get uri for\\n    /// @return default uri getter functionality\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    advancedConfig.uriBase,\\n                    StringsUpgradeable.toString(tokenId),\\n                    advancedConfig.uriExtension\\n                )\\n            );\\n    }\\n\\n    /// internal base override\\n    function __tokenURI(uint256 tokenId)\\n        public\\n        view\\n        onlyInternal\\n        returns (string memory)\\n    {\\n        return tokenURI(tokenId);\\n    }\\n\\n    /// Exposing token exists check for base contract\\n    function __exists(uint256 tokenId) external view override returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// Getter for approved or owner\\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        override\\n        onlyInternal\\n        returns (bool)\\n    {\\n        return _isApprovedOrOwner(spender, tokenId);\\n    }\\n\\n    /// IERC165 getter\\n    /// @param interfaceId interfaceId bytes4 to check support for\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            type(IBaseERC721Interface).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6779d0735992b2ed17a766d5b4de197cd189416069f8dfc04c444de77bbc07dd\",\"license\":\"GPL-3.0\"},\"gwei-slim-nft-contracts/contracts/base/ERC721Delegated.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {StorageSlotUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\\\";\\n\\nimport {IBaseERC721Interface, ConfigSettings} from \\\"./ERC721Base.sol\\\";\\n\\ncontract ERC721Delegated {\\n    uint256[100000] gap;\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    // Reference to base NFT implementation\\n    function implementation() public view returns (address) {\\n        return\\n            StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _initImplementation(address _nftImplementation) private {\\n        StorageSlotUpgradeable\\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\\n            .value = _nftImplementation;\\n    }\\n\\n    /// Constructor that sets up the\\n    constructor(\\n        address _nftImplementation,\\n        string memory name,\\n        string memory symbol,\\n        ConfigSettings memory settings\\n    ) {\\n        /// Removed for gas saving reasons, the check below implictly accomplishes this\\n        // require(\\n        //     _nftImplementation.supportsInterface(\\n        //         type(IBaseERC721Interface).interfaceId\\n        //     )\\n        // );\\n        _initImplementation(_nftImplementation);\\n        (bool success, ) = _nftImplementation.delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,string,string,(uint16,string,string,bool))\\\",\\n                msg.sender,\\n                name,\\n                symbol,\\n                settings\\n            )\\n        );\\n        require(success);\\n    }\\n\\n    /// OnlyOwner implemntation that proxies to base ownable contract for info\\n    modifier onlyOwner() {\\n        require(msg.sender == base().__owner(), \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    /// Getter to return the base implementation contract to call methods from\\n    /// Don't expose base contract to parent due to need to call private internal base functions\\n    function base() private view returns (IBaseERC721Interface) {\\n        return IBaseERC721Interface(address(this));\\n    }\\n\\n    // helpers to mimic Openzeppelin internal functions\\n\\n    /// Getter for the contract owner\\n    /// @return address owner address\\n    function _owner() internal view returns (address) {\\n        return base().__owner();\\n    }\\n\\n    /// Internal burn function, only accessible from within contract\\n    /// @param id nft id to burn\\n    function _burn(uint256 id) internal {\\n        base().__burn(id);\\n    }\\n\\n    /// Internal mint function, only accessible from within contract\\n    /// @param to address to mint NFT to\\n    /// @param id nft id to mint\\n    function _mint(address to, uint256 id) internal {\\n        base().__mint(to, id);\\n    }\\n\\n    /// Internal exists function to determine if fn exists\\n    /// @param id nft id to check if exists\\n    function _exists(uint256 id) internal view returns (bool) {\\n        return base().__exists(id);\\n    }\\n\\n    /// Internal getter for tokenURI\\n    /// @param tokenId id of token to get tokenURI for\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        return base().__tokenURI(tokenId);\\n    }\\n\\n    /// is approved for all getter underlying getter\\n    /// @param owner to check\\n    /// @param operator to check\\n    function _isApprovedForAll(address owner, address operator)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return base().__isApprovedForAll(owner, operator);\\n    }\\n\\n    /// Internal getter for approved or owner for a given operator\\n    /// @param operator address of operator to check\\n    /// @param id id of nft to check for\\n    function _isApprovedOrOwner(address operator, uint256 id)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return base().__isApprovedOrOwner(operator, id);\\n    }\\n\\n    /// Sets the base URI of the contract. Allowed only by parent contract\\n    /// @param newUri new uri base (http://URI) followed by number string of nft followed by extension string\\n    /// @param newExtension optional uri extension\\n    function _setBaseURI(string memory newUri, string memory newExtension)\\n        internal\\n    {\\n        base().__setBaseURI(newUri, newExtension);\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to nftImplementation.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        address impl = implementation();\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev No base NFT functions receive any value\\n     */\\n    receive() external payable {\\n        revert();\\n    }\\n}\\n\",\"keccak256\":\"0x2d839da5508c5b80afdf0f7556fe61003b0e6bde6ac0c1aa36c8384070471498\",\"license\":\"GPL-3.0\"},\"gwei-slim-nft-contracts/contracts/base/IBaseERC721Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// Additional features and functions assigned to the\\n/// Base721 contract for hooks and overrides\\ninterface IBaseERC721Interface {\\n    /*\\n     Exposing common NFT internal functionality for base contract overrides\\n     To save gas and make API cleaner this is only for new functionality not exposed in\\n     the core ERC721 contract\\n    */\\n\\n    /// Mint an NFT. Allowed to mint by owner, approval or by the parent contract\\n    /// @param tokenId id to burn\\n    function __burn(uint256 tokenId) external;\\n\\n    /// Mint an NFT. Allowed only by the parent contract\\n    /// @param to address to mint to\\n    /// @param tokenId token id to mint\\n    function __mint(address to, uint256 tokenId) external;\\n\\n    /// Set the base URI of the contract. Allowed only by parent contract\\n    /// @param base base uri\\n    /// @param extension extension\\n    function __setBaseURI(string memory base, string memory extension) external;\\n\\n    /* Exposes common internal read features for public use */\\n\\n    /// Token exists\\n    /// @param tokenId token id to see if it exists\\n    function __exists(uint256 tokenId) external view returns (bool);\\n\\n    /// Simple approval for operation check on token for address\\n    /// @param spender address spending/changing token\\n    /// @param tokenId tokenID to change / operate on\\n    function __isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function __isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function __tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function __owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x97f7849166efc61ae0f4fa7c755796e8e909023ab93c29c7fdd1fb5adde9abe8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200272538038062002725833981016040819052620000349162000219565b60408051808201825260058152645a6f72627360d81b6020808301919091528251808401845260048152632d27a92160e11b8183015283516080810185526000808252855180850187528181528285015285519384018652808452948101929092526060820193909352849290620000ac8462000199565b6000846001600160a01b031633858585604051602401620000d19493929190620002b9565b60408051601f198184030181529181526020820180516001600160e01b031663b1a78e3f60e01b1790525162000108919062000358565b600060405180830381855af49150503d806000811462000145576040519150601f19603f3d011682016040523d82523d6000602084013e6200014a565b606091505b50509050806200015957600080fd5b5050505050806001600160a01b03166080816001600160a01b03168152505062000191620186a0620001f460201b620006391760201c565b505062000376565b80620001d37f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620001fd60201b620006421760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b80546001019055565b90565b6001600160a01b03811681146200021657600080fd5b50565b600080604083850312156200022d57600080fd5b82516200023a8162000200565b60208401519092506200024d8162000200565b809150509250929050565b60005b83811015620002755781810151838201526020016200025b565b8381111562000285576000848401525b50505050565b60008151808452620002a581602086016020860162000258565b601f01601f19169290920160200192915050565b6001600160a01b0385168152608060208201819052600090620002df908301866200028b565b8281036040840152620002f381866200028b565b9050828103606084015261ffff84511681526020840151608060208301526200032060808301826200028b565b9050604085015182820360408401526200033b82826200028b565b915050606085015115156060830152809250505095945050505050565b600082516200036c81846020870162000258565b9190910192915050565b60805161238c62000399600039600081816103e20152610550015261238c6000f3fe6080604052600436106100645760003560e01c80631249c58b1461008557806342966c681461009a5780635c60da1b146100ba5780639769dc0e146100ec578063aa1152ab1461010c578063c87b56dd14610131578063de9099421461015e5761006e565b3661006e57600080fd5b34801561007a57600080fd5b5061008361017e565b005b34801561009157600080fd5b506100836101ae565b3480156100a657600080fd5b506100836100b5366004611af2565b610218565b3480156100c657600080fd5b506100cf61026a565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f857600080fd5b50610083610107366004611b20565b610298565b34801561011857600080fd5b50610121610374565b60405190151581526020016100e3565b34801561013d57600080fd5b5061015161014c366004611af2565b61039e565b6040516100e39190611b99565b34801561016a57600080fd5b50610151610179366004611b20565b610521565b600061018861026a565b90503660008037600080366000845af43d6000803e8080156101a9573d6000f35b3d6000fd5b6101b6610374565b6101f25760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b60448201526064015b60405180910390fd5b61020633610201620186a05490565b610645565b610216620186a080546001019055565b565b61022233826106ae565b61025e5760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e48185c1c1c9bdd9959609a1b60448201526064016101e9565b6102678161073a565b50565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b306001600160a01b03166313effa0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103099190611bac565b6001600160a01b0316336001600160a01b0316146103555760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016101e9565b61036481610201620186a05490565b610267620186a080546001019055565b6000635fee660042118015610399575061039562015180635fee6600611bdf565b4211155b905090565b60606103a98261078e565b6103e05760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b60448201526064016101e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d01fde8c61041884610800565b6040516331a9108f60e11b81526004810186905261048b903090636352211e9060240160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101799190611bac565b60405160200161049c929190611c13565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016104c79190611b99565b60006040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b9190810190611da5565b92915050565b6060600061052e83610906565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b199661058f9691959194939201611e5d565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016105ba9190611b99565b60006040518083038186803b1580156105d257600080fd5b505afa1580156105e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060e9190810190611da5565b90508060405160200161062191906120b8565b60405160208183030381529060405292505050919050565b80546001019055565b90565b30604051633dc8ded760e01b81526001600160a01b038481166004830152602482018490529190911690633dc8ded790604401600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b505050505050565b60003060405163296cf3bd60e11b81526001600160a01b0385811660048301526024820185905291909116906352d9e77a9060440160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073391906120fd565b9392505050565b60405163068d00a960e51b815260048101829052309063d1a0152090602401600060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b5050505050565b604051638553c3e960e01b8152600481018290526000903090638553c3e99060240160206040518083038186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906120fd565b6060816108245750506040805180820190915260018152600360fc1b602082015290565b8160005b811561084e57806108388161211f565b91506108479050600a83612150565b9150610828565b60008167ffffffffffffffff81111561086957610869611d8f565b6040519080825280601f01601f191660200182016040528015610893576020820181803683370190505b5090505b84156108fe576108a8600183612164565b91506108b5600a8661217b565b6108c0906030611bdf565b60f81b8183815181106108d5576108d5611e47565b60200101906001600160f81b031916908160001a9053506108f7600a86612150565b9450610897565b949350505050565b61090e611acb565b6001600160a01b038216600060118260131a601802816109305761093061213a565b0490506000602283601d1a6005028161094b5761094b61213a565b046020019050606160338460171a600502816109695761096961213a565b0401604801600281049050600060108560181a816109895761098961213a565b04605101905060006080866015600b91901a0260ff16816109ac576109ac61213a565b046046019050600a82038111156109c4575060091981015b6040805160a0810190915280610a3e6109f989601c1a60028b60191a816109ed576109ed61213a565b0660ff168a6000610bea565b610a1960028b601c1a81610a0f57610a0f61213a565b0687876064610d3e565b610a3960028c601a1a81610a2f57610a2f61213a565b068a8a6064610d86565b610dfe565b8152602001610aac610a6c89601c1a60028b60191a81610a6057610a6061213a565b0660ff168a600a610bea565b610a8c60028b601c1a81610a8257610a8261213a565b068787605a610d3e565b610a3960028c601a1a81610aa257610aa261213a565b068a8a605a610d86565b8152602001610b1a610ada89601c1a60028b60191a81610ace57610ace61213a565b0660ff168a6046610bea565b610afa60028b601c1a81610af057610af061213a565b0687876046610d3e565b610a3960028c601a1a81610b1057610b1061213a565b068a8a6046610d86565b8152602001610b88610b4889601c1a60028b60191a81610b3c57610b3c61213a565b0660ff168a605a610bea565b610b6860028b601c1a81610b5e57610b5e61213a565b0687876014610d3e565b610a3960028c601a1a81610b7e57610b7e61213a565b068a8a6014610d86565b8152602001610bdc610bb689601c1a60028b60191a81610baa57610baa61213a565b0660ff168a6064610bea565b610bd660028b601c1a81610bcc57610bcc61213a565b0687876000610d3e565b88610dfe565b905298975050505050505050565b600080610bf860048761218f565b60ff1690508381610c6557610c5c8615610c1c57610c1782600a6121b1565b610c27565b610c27600a836121f2565b610c349060ff8716612231565b82610c4360ff881660646121f2565b610c4d9190612231565b610c5791906121b1565b610e45565b925050506108fe565b8160011415610c8d57610c5c8615610c8257610c1782601e6121b1565b610c27601e836121f2565b8160021415610ce857610c5c8615610caf57610caa8260326121b1565b610cba565b610cba6032836121f2565b610cc68660ff16610e73565b610cd09190612231565b82610cdd8760ff16610e73565b610c439060646121f2565b610d3360808860ff1611610cfd576000610d00565b60015b60ff168715610d1057603c610d14565b603b195b610d1e9190612231565b610d2890836121b1565b610cba90601e6121b1565b979650505050505050565b60008060ff8616610d6e57610d5283611369565b60ff1690506064818103860285830201046001019150506108fe565b50816064818103860285830201049695505050505050565b60008060ff8616610da457610d9a83611369565b60ff169050610db3565b610dad836116c5565b60ff1690505b6064610dbf85836122b6565b86610dcb846064612164565b610dd591906122b6565b610ddf9190611bdf565b610de99190612150565b610df4906001611bdf565b9695505050505050565b6060610e0984610800565b610e1284610800565b610e1b84610800565b604051602001610e2d939291906122d5565b60405160208183030381529060405290509392505050565b606490056000808212610e5e57610168825b0692915050565b610168826000190281610e5757610e5761213a565b6000600d8261ffff161015610e8a57506000919050565b60118261ffff161015610e9f57506001919050565b60138261ffff161015610eb457506002919050565b60158261ffff161015610ec957506003919050565b60178261ffff161015610ede57506004919050565b60188261ffff161015610ef357506005919050565b60198261ffff161015610f0857506006919050565b601b8261ffff161015610f1d57506007919050565b601c8261ffff161015610f3257506008919050565b601d8261ffff161015610f4757506009919050565b601e8261ffff161015610f5c5750600a919050565b601f8261ffff161015610f715750600b919050565b60208261ffff161015610f865750600d919050565b60218261ffff161015610f9b5750600e919050565b60228261ffff161015610fb05750600f919050565b60238261ffff161015610fc557506011919050565b60248261ffff161015610fda57506012919050565b60258261ffff161015610fef57506014919050565b60268261ffff16101561100457506015919050565b60278261ffff16101561101957506017919050565b60288261ffff16101561102e57506019919050565b60298261ffff1610156110435750601b919050565b602a8261ffff1610156110585750601d919050565b602b8261ffff16101561106d5750601f919050565b602c8261ffff16101561108257506022919050565b602d8261ffff16101561109757506024919050565b602e8261ffff1610156110ac57506026919050565b602f8261ffff1610156110c157506029919050565b60308261ffff1610156110d65750602c919050565b60318261ffff1610156110eb5750602f919050565b60328261ffff16101561110057506032919050565b60338261ffff16101561111557506034919050565b60348261ffff16101561112a57506037919050565b60358261ffff16101561113f5750603a919050565b60368261ffff1610156111545750603d919050565b60378261ffff1610156111695750603f919050565b60388261ffff16101561117e57506041919050565b60398261ffff16101561119357506044919050565b603a8261ffff1610156111a857506046919050565b603b8261ffff1610156111bd57506048919050565b603c8261ffff1610156111d25750604a919050565b603d8261ffff1610156111e75750604c919050565b603e8261ffff1610156111fc5750604e919050565b603f8261ffff1610156112115750604f919050565b60408261ffff16101561122657506051919050565b60418261ffff16101561123b57506052919050565b60428261ffff16101561125057506054919050565b60438261ffff16101561126557506055919050565b60448261ffff16101561127a57506056919050565b60458261ffff16101561128f57506058919050565b60468261ffff1610156112a457506059919050565b60478261ffff1610156112b95750605a919050565b60488261ffff1610156112ce5750605b919050565b604a8261ffff1610156112e35750605c919050565b604b8261ffff1610156112f85750605d919050565b604c8261ffff16101561130d5750605e919050565b604e8261ffff1610156113225750605f919050565b60508261ffff16101561133757506060919050565b60528261ffff16101561134c57506061919050565b60568261ffff16101561136157506062919050565b506063919050565b6000602782101561137c57506000919050565b602d82101561138d57506001919050565b603182101561139e57506002919050565b60348210156113af57506003919050565b60358210156113c057506004919050565b60368210156113d157506004919050565b60378210156113e257506005919050565b60388210156113f357506005919050565b603982101561140457506006919050565b603a82101561141557506006919050565b603b82101561142657506007919050565b603c82101561143757506007919050565b603d82101561144857506008919050565b603e82101561145957506009919050565b603f82101561146a57506009919050565b604082101561147b5750600a919050565b604182101561148c5750600b919050565b604282101561149d5750600c919050565b60438210156114ae5750600d919050565b60448210156114bf5750600e919050565b60458210156114d05750600f919050565b60468210156114e157506010919050565b60478210156114f257506012919050565b604882101561150357506013919050565b604982101561151457506014919050565b604a82101561152557506016919050565b604b82101561153657506017919050565b604c82101561154757506019919050565b604d8210156115585750601b919050565b604e8210156115695750601c919050565b604f82101561157a5750601e919050565b605082101561158b57506020919050565b605182101561159c57506022919050565b60528210156115ad57506025919050565b60538210156115be57506027919050565b60548210156115cf57506029919050565b60558210156115e05750602c919050565b60568210156115f15750602f919050565b605782101561160257506031919050565b605882101561161357506034919050565b605982101561162457506037919050565b605a8210156116355750603b919050565b605b8210156116465750603e919050565b605c82101561165757506041919050565b605d82101561166857506045919050565b605e82101561167957506049919050565b605f82101561168a5750604d919050565b606082101561169b57506051919050565b60618210156116ac57506055919050565b60628210156116bd5750605a919050565b50605f919050565b600060168210156116d857506000919050565b601c8210156116e957506001919050565b60208210156116fa57506002919050565b602082101561170b57506003919050565b602282101561171c57506003919050565b602482101561172d57506004919050565b602782101561173e57506005919050565b602982101561174f57506006919050565b602b82101561176057506007919050565b602e82101561177157506009919050565b602f8210156117825750600a919050565b60318210156117935750600b919050565b60328210156117a45750600c919050565b60338210156117b55750600d919050565b60358210156117c65750600e919050565b60368210156117d75750600f919050565b60378210156117e857506010919050565b60388210156117f957506011919050565b603982101561180a57506012919050565b603a82101561181b57506013919050565b603b82101561182c57506014919050565b603c82101561183d57506015919050565b603d82101561184e57506016919050565b603e82101561185f57506017919050565b603f82101561187057506019919050565b60408210156118815750601a919050565b60418210156118925750601b919050565b60428210156118a35750601c919050565b60438210156118b45750601e919050565b60448210156118c55750601f919050565b60458210156118d657506020919050565b60468210156118e757506022919050565b60478210156118f857506023919050565b604882101561190957506025919050565b604982101561191a57506026919050565b604a82101561192b57506028919050565b604b82101561193c5750602a919050565b604c82101561194d5750602b919050565b604d82101561195e5750602d919050565b604e82101561196f5750602f919050565b604f82101561198057506031919050565b605082101561199157506033919050565b60518210156119a257506035919050565b60528210156119b357506037919050565b60538210156119c457506039919050565b60548210156119d55750603b919050565b60558210156119e65750603d919050565b60568210156119f75750603f919050565b6057821015611a0857506041919050565b6058821015611a1957506044919050565b6059821015611a2a57506046919050565b605a821015611a3b57506048919050565b605b821015611a4c5750604b919050565b605c821015611a5d5750604d919050565b605d821015611a6e57506050919050565b605e821015611a7f57506053919050565b605f821015611a9057506055919050565b6060821015611aa157506058919050565b6061821015611ab25750605b919050565b6062821015611ac35750605e919050565b506061919050565b6040518060a001604052806005905b6060815260200190600190039081611ada5790505090565b600060208284031215611b0457600080fd5b5035919050565b6001600160a01b038116811461026757600080fd5b600060208284031215611b3257600080fd5b813561073381611b0b565b60005b83811015611b58578181015183820152602001611b40565b83811115611b67576000848401525b50505050565b60008151808452611b85816020860160208601611b3d565b601f01601f19169290920160200192915050565b6020815260006107336020830184611b6d565b600060208284031215611bbe57600080fd5b815161073381611b0b565b634e487b7160e01b600052601160045260246000fd5b60008219821115611bf257611bf2611bc9565b500190565b60008151611c09818560208601611b3d565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090611c44816015850160208801611b3d565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351611d788160fc840160208801611b3d565b610df460fc8284010161227d60f01b815260020190565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611db757600080fd5b815167ffffffffffffffff80821115611dcf57600080fd5b818401915084601f830112611de357600080fd5b815181811115611df557611df5611d8f565b604051601f8201601f19908116603f01168101908382118183101715611e1d57611e1d611d8f565b81604052828152876020848701011115611e3657600080fd5b610d33836020830160208801611b3d565b634e487b7160e01b600052603260045260246000fd5b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032303020323030223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236342e393625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b608082015260008651611f28816098850160208b01611b3d565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b882018190528751611f768160be850160208c01611b3d565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de8201526120ac61203c612036612000611ffa611fc260e487018c611bf7565b7f22202f3e3c73746f70206f66667365743d2239302e363225222073746f702d6381526537b637b91e9160d11b602082015260260190565b89611bf7565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86611bf7565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c63697281527f636c652063783d22353025222063793d223530252220723d223530252220666960208201527736361e913ab9361411b3b930b2149110179f1e17b9bb339f60411b604082015260580190565b98975050505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516120f081601a850160208701611b3d565b91909101601a0192915050565b60006020828403121561210f57600080fd5b8151801515811461073357600080fd5b600060001982141561213357612133611bc9565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261215f5761215f61213a565b500490565b60008282101561217657612176611bc9565b500390565b60008261218a5761218a61213a565b500690565b600060ff8316806121a2576121a261213a565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156121d3576121d3611bc9565b600160ff1b83900384128116156121ec576121ec611bc9565b50500190565b60008083128015600160ff1b85018412161561221057612210611bc9565b6001600160ff1b038401831381161561222b5761222b611bc9565b50500390565b60006001600160ff1b038184138284138082168684048611161561225757612257611bc9565b600160ff1b600087128281168783058912161561227657612276611bc9565b6000871292508782058712848416161561229257612292611bc9565b878505871281841616156122a8576122a8611bc9565b505050929093029392505050565b60008160001904831182151516156122d0576122d0611bc9565b500290565b630d0e6d8560e31b8152600084516122f4816004850160208901611b3d565b61016160f51b6004918401918201528451612316816006840160208901611b3d565b6201296160ed1b60069290910191820152835161233a816009840160208801611b3d565b61252960f01b60099290910191820152600b019594505050505056fea26469706673582212209d4ce126fb089b413fc8b5431d26c925ec4315e4cdd3b7bb0dbfb8beef30484664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100645760003560e01c80631249c58b1461008557806342966c681461009a5780635c60da1b146100ba5780639769dc0e146100ec578063aa1152ab1461010c578063c87b56dd14610131578063de9099421461015e5761006e565b3661006e57600080fd5b34801561007a57600080fd5b5061008361017e565b005b34801561009157600080fd5b506100836101ae565b3480156100a657600080fd5b506100836100b5366004611af2565b610218565b3480156100c657600080fd5b506100cf61026a565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f857600080fd5b50610083610107366004611b20565b610298565b34801561011857600080fd5b50610121610374565b60405190151581526020016100e3565b34801561013d57600080fd5b5061015161014c366004611af2565b61039e565b6040516100e39190611b99565b34801561016a57600080fd5b50610151610179366004611b20565b610521565b600061018861026a565b90503660008037600080366000845af43d6000803e8080156101a9573d6000f35b3d6000fd5b6101b6610374565b6101f25760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b60448201526064015b60405180910390fd5b61020633610201620186a05490565b610645565b610216620186a080546001019055565b565b61022233826106ae565b61025e5760405162461bcd60e51b815260206004820152600d60248201526c13db9b1e48185c1c1c9bdd9959609a1b60448201526064016101e9565b6102678161073a565b50565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b306001600160a01b03166313effa0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103099190611bac565b6001600160a01b0316336001600160a01b0316146103555760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016101e9565b61036481610201620186a05490565b610267620186a080546001019055565b6000635fee660042118015610399575061039562015180635fee6600611bdf565b4211155b905090565b60606103a98261078e565b6103e05760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b60448201526064016101e9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d01fde8c61041884610800565b6040516331a9108f60e11b81526004810186905261048b903090636352211e9060240160206040518083038186803b15801561045357600080fd5b505afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101799190611bac565b60405160200161049c929190611c13565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016104c79190611b99565b60006040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b9190810190611da5565b92915050565b6060600061052e83610906565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b199661058f9691959194939201611e5d565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016105ba9190611b99565b60006040518083038186803b1580156105d257600080fd5b505afa1580156105e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060e9190810190611da5565b90508060405160200161062191906120b8565b60405160208183030381529060405292505050919050565b80546001019055565b90565b30604051633dc8ded760e01b81526001600160a01b038481166004830152602482018490529190911690633dc8ded790604401600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b505050505050565b60003060405163296cf3bd60e11b81526001600160a01b0385811660048301526024820185905291909116906352d9e77a9060440160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073391906120fd565b9392505050565b60405163068d00a960e51b815260048101829052309063d1a0152090602401600060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b5050505050565b604051638553c3e960e01b8152600481018290526000903090638553c3e99060240160206040518083038186803b1580156107c857600080fd5b505afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b91906120fd565b6060816108245750506040805180820190915260018152600360fc1b602082015290565b8160005b811561084e57806108388161211f565b91506108479050600a83612150565b9150610828565b60008167ffffffffffffffff81111561086957610869611d8f565b6040519080825280601f01601f191660200182016040528015610893576020820181803683370190505b5090505b84156108fe576108a8600183612164565b91506108b5600a8661217b565b6108c0906030611bdf565b60f81b8183815181106108d5576108d5611e47565b60200101906001600160f81b031916908160001a9053506108f7600a86612150565b9450610897565b949350505050565b61090e611acb565b6001600160a01b038216600060118260131a601802816109305761093061213a565b0490506000602283601d1a6005028161094b5761094b61213a565b046020019050606160338460171a600502816109695761096961213a565b0401604801600281049050600060108560181a816109895761098961213a565b04605101905060006080866015600b91901a0260ff16816109ac576109ac61213a565b046046019050600a82038111156109c4575060091981015b6040805160a0810190915280610a3e6109f989601c1a60028b60191a816109ed576109ed61213a565b0660ff168a6000610bea565b610a1960028b601c1a81610a0f57610a0f61213a565b0687876064610d3e565b610a3960028c601a1a81610a2f57610a2f61213a565b068a8a6064610d86565b610dfe565b8152602001610aac610a6c89601c1a60028b60191a81610a6057610a6061213a565b0660ff168a600a610bea565b610a8c60028b601c1a81610a8257610a8261213a565b068787605a610d3e565b610a3960028c601a1a81610aa257610aa261213a565b068a8a605a610d86565b8152602001610b1a610ada89601c1a60028b60191a81610ace57610ace61213a565b0660ff168a6046610bea565b610afa60028b601c1a81610af057610af061213a565b0687876046610d3e565b610a3960028c601a1a81610b1057610b1061213a565b068a8a6046610d86565b8152602001610b88610b4889601c1a60028b60191a81610b3c57610b3c61213a565b0660ff168a605a610bea565b610b6860028b601c1a81610b5e57610b5e61213a565b0687876014610d3e565b610a3960028c601a1a81610b7e57610b7e61213a565b068a8a6014610d86565b8152602001610bdc610bb689601c1a60028b60191a81610baa57610baa61213a565b0660ff168a6064610bea565b610bd660028b601c1a81610bcc57610bcc61213a565b0687876000610d3e565b88610dfe565b905298975050505050505050565b600080610bf860048761218f565b60ff1690508381610c6557610c5c8615610c1c57610c1782600a6121b1565b610c27565b610c27600a836121f2565b610c349060ff8716612231565b82610c4360ff881660646121f2565b610c4d9190612231565b610c5791906121b1565b610e45565b925050506108fe565b8160011415610c8d57610c5c8615610c8257610c1782601e6121b1565b610c27601e836121f2565b8160021415610ce857610c5c8615610caf57610caa8260326121b1565b610cba565b610cba6032836121f2565b610cc68660ff16610e73565b610cd09190612231565b82610cdd8760ff16610e73565b610c439060646121f2565b610d3360808860ff1611610cfd576000610d00565b60015b60ff168715610d1057603c610d14565b603b195b610d1e9190612231565b610d2890836121b1565b610cba90601e6121b1565b979650505050505050565b60008060ff8616610d6e57610d5283611369565b60ff1690506064818103860285830201046001019150506108fe565b50816064818103860285830201049695505050505050565b60008060ff8616610da457610d9a83611369565b60ff169050610db3565b610dad836116c5565b60ff1690505b6064610dbf85836122b6565b86610dcb846064612164565b610dd591906122b6565b610ddf9190611bdf565b610de99190612150565b610df4906001611bdf565b9695505050505050565b6060610e0984610800565b610e1284610800565b610e1b84610800565b604051602001610e2d939291906122d5565b60405160208183030381529060405290509392505050565b606490056000808212610e5e57610168825b0692915050565b610168826000190281610e5757610e5761213a565b6000600d8261ffff161015610e8a57506000919050565b60118261ffff161015610e9f57506001919050565b60138261ffff161015610eb457506002919050565b60158261ffff161015610ec957506003919050565b60178261ffff161015610ede57506004919050565b60188261ffff161015610ef357506005919050565b60198261ffff161015610f0857506006919050565b601b8261ffff161015610f1d57506007919050565b601c8261ffff161015610f3257506008919050565b601d8261ffff161015610f4757506009919050565b601e8261ffff161015610f5c5750600a919050565b601f8261ffff161015610f715750600b919050565b60208261ffff161015610f865750600d919050565b60218261ffff161015610f9b5750600e919050565b60228261ffff161015610fb05750600f919050565b60238261ffff161015610fc557506011919050565b60248261ffff161015610fda57506012919050565b60258261ffff161015610fef57506014919050565b60268261ffff16101561100457506015919050565b60278261ffff16101561101957506017919050565b60288261ffff16101561102e57506019919050565b60298261ffff1610156110435750601b919050565b602a8261ffff1610156110585750601d919050565b602b8261ffff16101561106d5750601f919050565b602c8261ffff16101561108257506022919050565b602d8261ffff16101561109757506024919050565b602e8261ffff1610156110ac57506026919050565b602f8261ffff1610156110c157506029919050565b60308261ffff1610156110d65750602c919050565b60318261ffff1610156110eb5750602f919050565b60328261ffff16101561110057506032919050565b60338261ffff16101561111557506034919050565b60348261ffff16101561112a57506037919050565b60358261ffff16101561113f5750603a919050565b60368261ffff1610156111545750603d919050565b60378261ffff1610156111695750603f919050565b60388261ffff16101561117e57506041919050565b60398261ffff16101561119357506044919050565b603a8261ffff1610156111a857506046919050565b603b8261ffff1610156111bd57506048919050565b603c8261ffff1610156111d25750604a919050565b603d8261ffff1610156111e75750604c919050565b603e8261ffff1610156111fc5750604e919050565b603f8261ffff1610156112115750604f919050565b60408261ffff16101561122657506051919050565b60418261ffff16101561123b57506052919050565b60428261ffff16101561125057506054919050565b60438261ffff16101561126557506055919050565b60448261ffff16101561127a57506056919050565b60458261ffff16101561128f57506058919050565b60468261ffff1610156112a457506059919050565b60478261ffff1610156112b95750605a919050565b60488261ffff1610156112ce5750605b919050565b604a8261ffff1610156112e35750605c919050565b604b8261ffff1610156112f85750605d919050565b604c8261ffff16101561130d5750605e919050565b604e8261ffff1610156113225750605f919050565b60508261ffff16101561133757506060919050565b60528261ffff16101561134c57506061919050565b60568261ffff16101561136157506062919050565b506063919050565b6000602782101561137c57506000919050565b602d82101561138d57506001919050565b603182101561139e57506002919050565b60348210156113af57506003919050565b60358210156113c057506004919050565b60368210156113d157506004919050565b60378210156113e257506005919050565b60388210156113f357506005919050565b603982101561140457506006919050565b603a82101561141557506006919050565b603b82101561142657506007919050565b603c82101561143757506007919050565b603d82101561144857506008919050565b603e82101561145957506009919050565b603f82101561146a57506009919050565b604082101561147b5750600a919050565b604182101561148c5750600b919050565b604282101561149d5750600c919050565b60438210156114ae5750600d919050565b60448210156114bf5750600e919050565b60458210156114d05750600f919050565b60468210156114e157506010919050565b60478210156114f257506012919050565b604882101561150357506013919050565b604982101561151457506014919050565b604a82101561152557506016919050565b604b82101561153657506017919050565b604c82101561154757506019919050565b604d8210156115585750601b919050565b604e8210156115695750601c919050565b604f82101561157a5750601e919050565b605082101561158b57506020919050565b605182101561159c57506022919050565b60528210156115ad57506025919050565b60538210156115be57506027919050565b60548210156115cf57506029919050565b60558210156115e05750602c919050565b60568210156115f15750602f919050565b605782101561160257506031919050565b605882101561161357506034919050565b605982101561162457506037919050565b605a8210156116355750603b919050565b605b8210156116465750603e919050565b605c82101561165757506041919050565b605d82101561166857506045919050565b605e82101561167957506049919050565b605f82101561168a5750604d919050565b606082101561169b57506051919050565b60618210156116ac57506055919050565b60628210156116bd5750605a919050565b50605f919050565b600060168210156116d857506000919050565b601c8210156116e957506001919050565b60208210156116fa57506002919050565b602082101561170b57506003919050565b602282101561171c57506003919050565b602482101561172d57506004919050565b602782101561173e57506005919050565b602982101561174f57506006919050565b602b82101561176057506007919050565b602e82101561177157506009919050565b602f8210156117825750600a919050565b60318210156117935750600b919050565b60328210156117a45750600c919050565b60338210156117b55750600d919050565b60358210156117c65750600e919050565b60368210156117d75750600f919050565b60378210156117e857506010919050565b60388210156117f957506011919050565b603982101561180a57506012919050565b603a82101561181b57506013919050565b603b82101561182c57506014919050565b603c82101561183d57506015919050565b603d82101561184e57506016919050565b603e82101561185f57506017919050565b603f82101561187057506019919050565b60408210156118815750601a919050565b60418210156118925750601b919050565b60428210156118a35750601c919050565b60438210156118b45750601e919050565b60448210156118c55750601f919050565b60458210156118d657506020919050565b60468210156118e757506022919050565b60478210156118f857506023919050565b604882101561190957506025919050565b604982101561191a57506026919050565b604a82101561192b57506028919050565b604b82101561193c5750602a919050565b604c82101561194d5750602b919050565b604d82101561195e5750602d919050565b604e82101561196f5750602f919050565b604f82101561198057506031919050565b605082101561199157506033919050565b60518210156119a257506035919050565b60528210156119b357506037919050565b60538210156119c457506039919050565b60548210156119d55750603b919050565b60558210156119e65750603d919050565b60568210156119f75750603f919050565b6057821015611a0857506041919050565b6058821015611a1957506044919050565b6059821015611a2a57506046919050565b605a821015611a3b57506048919050565b605b821015611a4c5750604b919050565b605c821015611a5d5750604d919050565b605d821015611a6e57506050919050565b605e821015611a7f57506053919050565b605f821015611a9057506055919050565b6060821015611aa157506058919050565b6061821015611ab25750605b919050565b6062821015611ac35750605e919050565b506061919050565b6040518060a001604052806005905b6060815260200190600190039081611ada5790505090565b600060208284031215611b0457600080fd5b5035919050565b6001600160a01b038116811461026757600080fd5b600060208284031215611b3257600080fd5b813561073381611b0b565b60005b83811015611b58578181015183820152602001611b40565b83811115611b67576000848401525b50505050565b60008151808452611b85816020860160208601611b3d565b601f01601f19169290920160200192915050565b6020815260006107336020830184611b6d565b600060208284031215611bbe57600080fd5b815161073381611b0b565b634e487b7160e01b600052601160045260246000fd5b60008219821115611bf257611bf2611bc9565b500190565b60008151611c09818560208601611b3d565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090611c44816015850160208801611b3d565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351611d788160fc840160208801611b3d565b610df460fc8284010161227d60f01b815260020190565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611db757600080fd5b815167ffffffffffffffff80821115611dcf57600080fd5b818401915084601f830112611de357600080fd5b815181811115611df557611df5611d8f565b604051601f8201601f19908116603f01168101908382118183101715611e1d57611e1d611d8f565b81604052828152876020848701011115611e3657600080fd5b610d33836020830160208801611b3d565b634e487b7160e01b600052603260045260246000fd5b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032303020323030223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236342e393625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b608082015260008651611f28816098850160208b01611b3d565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b882018190528751611f768160be850160208c01611b3d565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de8201526120ac61203c612036612000611ffa611fc260e487018c611bf7565b7f22202f3e3c73746f70206f66667365743d2239302e363225222073746f702d6381526537b637b91e9160d11b602082015260260190565b89611bf7565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86611bf7565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c63697281527f636c652063783d22353025222063793d223530252220723d223530252220666960208201527736361e913ab9361411b3b930b2149110179f1e17b9bb339f60411b604082015260580190565b98975050505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516120f081601a850160208701611b3d565b91909101601a0192915050565b60006020828403121561210f57600080fd5b8151801515811461073357600080fd5b600060001982141561213357612133611bc9565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261215f5761215f61213a565b500490565b60008282101561217657612176611bc9565b500390565b60008261218a5761218a61213a565b500690565b600060ff8316806121a2576121a261213a565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156121d3576121d3611bc9565b600160ff1b83900384128116156121ec576121ec611bc9565b50500190565b60008083128015600160ff1b85018412161561221057612210611bc9565b6001600160ff1b038401831381161561222b5761222b611bc9565b50500390565b60006001600160ff1b038184138284138082168684048611161561225757612257611bc9565b600160ff1b600087128281168783058912161561227657612276611bc9565b6000871292508782058712848416161561229257612292611bc9565b878505871281841616156122a8576122a8611bc9565b505050929093029392505050565b60008160001904831182151516156122d0576122d0611bc9565b500290565b630d0e6d8560e31b8152600084516122f4816004850160208901611b3d565b61016160f51b6004918401918201528451612316816006840160208901611b3d565b6201296160ed1b60069290910191820152835161233a816009840160208801611b3d565b61252960f01b60099290910191820152600b019594505050505056fea26469706673582212209d4ce126fb089b413fc8b5431d26c925ec4315e4cdd3b7bb0dbfb8beef30484664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This custom NFT contract stores additional metadata to use for tokenURI",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5122,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "gap",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)100000_storage"
      },
      {
        "astId": 4389,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "100000",
        "type": "t_struct(Counter)1538_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)100000_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100000]",
        "numberOfBytes": "3200000"
      },
      "t_struct(Counter)1538_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1537,
            "contract": "contracts/ZorbNFT.sol:ZorbNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}