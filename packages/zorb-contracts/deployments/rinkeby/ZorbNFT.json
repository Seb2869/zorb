{
  "address": "0x094cE76Fa460A07794D9c9eebE22fF74Cdc589bC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPublicSharedMetadata",
          "name": "_sharedMetadata",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getZorbRenderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintIsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "marketPlaces",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "isKnown",
          "type": "bool"
        }
      ],
      "name": "setKnownMarketplaces",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "zorbForAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb52c991b23bb22228b887db813a4a18c3b6299c5a16dabf6057aeba58568011d",
  "receipt": {
    "to": null,
    "from": "0x9444390c01Dd5b7249E53FAc31290F7dFF53450D",
    "contractAddress": "0x094cE76Fa460A07794D9c9eebE22fF74Cdc589bC",
    "transactionIndex": 20,
    "gasUsed": "3132049",
    "logsBloom": "0x
    "blockHash": "0xfe74a472738893dd5fb14766aaaa3ba47cf3ea99206b41e207802ed1d29c7ba5",
    "transactionHash": "0xb52c991b23bb22228b887db813a4a18c3b6299c5a16dabf6057aeba58568011d",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 9908729,
        "transactionHash": "0xb52c991b23bb22228b887db813a4a18c3b6299c5a16dabf6057aeba58568011d",
        "address": "0x094cE76Fa460A07794D9c9eebE22fF74Cdc589bC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009444390c01dd5b7249e53fac31290f7dff53450d"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0xfe74a472738893dd5fb14766aaaa3ba47cf3ea99206b41e207802ed1d29c7ba5"
      }
    ],
    "blockNumber": 9908729,
    "cumulativeGasUsed": "6124356",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a3245d54E5407E276c47f0C181a22bf90c797Ce"
  ],
  "solcInputHash": "4ae5d675f0ee75b65e0f3475fb7a670f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPublicSharedMetadata\",\"name\":\"_sharedMetadata\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getZorbRenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"marketPlaces\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isKnown\",\"type\":\"bool\"}],\"name\":\"setKnownMarketplaces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"zorbForAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This custom NFT contract stores additional metadata to use for tokenURI\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZorbNFT.sol\":\"ZorbNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/ColorLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary ColorLib {\\n    struct HSL {\\n        uint256 h;\\n        uint256 s;\\n        uint256 l;\\n    }\\n\\n    function cubicInOut(uint16 p) internal pure returns (int256) {\\n        if (p < 13) {\\n            return 0;\\n        }\\n        if (p < 17) {\\n            return 1;\\n        }\\n        if (p < 19) {\\n            return 2;\\n        }\\n        if (p < 21) {\\n            return 3;\\n        }\\n        if (p < 23) {\\n            return 4;\\n        }\\n        if (p < 24) {\\n            return 5;\\n        }\\n        if (p < 25) {\\n            return 6;\\n        }\\n        if (p < 27) {\\n            return 7;\\n        }\\n        if (p < 28) {\\n            return 8;\\n        }\\n        if (p < 29) {\\n            return 9;\\n        }\\n        if (p < 30) {\\n            return 10;\\n        }\\n        if (p < 31) {\\n            return 11;\\n        }\\n        if (p < 32) {\\n            return 13;\\n        }\\n        if (p < 33) {\\n            return 14;\\n        }\\n        if (p < 34) {\\n            return 15;\\n        }\\n        if (p < 35) {\\n            return 17;\\n        }\\n        if (p < 36) {\\n            return 18;\\n        }\\n        if (p < 37) {\\n            return 20;\\n        }\\n        if (p < 38) {\\n            return 21;\\n        }\\n        if (p < 39) {\\n            return 23;\\n        }\\n        if (p < 40) {\\n            return 25;\\n        }\\n        if (p < 41) {\\n            return 27;\\n        }\\n        if (p < 42) {\\n            return 29;\\n        }\\n        if (p < 43) {\\n            return 31;\\n        }\\n        if (p < 44) {\\n            return 34;\\n        }\\n        if (p < 45) {\\n            return 36;\\n        }\\n        if (p < 46) {\\n            return 38;\\n        }\\n        if (p < 47) {\\n            return 41;\\n        }\\n        if (p < 48) {\\n            return 44;\\n        }\\n        if (p < 49) {\\n            return 47;\\n        }\\n        if (p < 50) {\\n            return 50;\\n        }\\n        if (p < 51) {\\n            return 52;\\n        }\\n        if (p < 52) {\\n            return 55;\\n        }\\n        if (p < 53) {\\n            return 58;\\n        }\\n        if (p < 54) {\\n            return 61;\\n        }\\n        if (p < 55) {\\n            return 63;\\n        }\\n        if (p < 56) {\\n            return 65;\\n        }\\n        if (p < 57) {\\n            return 68;\\n        }\\n        if (p < 58) {\\n            return 70;\\n        }\\n        if (p < 59) {\\n            return 72;\\n        }\\n        if (p < 60) {\\n            return 74;\\n        }\\n        if (p < 61) {\\n            return 76;\\n        }\\n        if (p < 62) {\\n            return 78;\\n        }\\n        if (p < 63) {\\n            return 79;\\n        }\\n        if (p < 64) {\\n            return 81;\\n        }\\n        if (p < 65) {\\n            return 82;\\n        }\\n        if (p < 66) {\\n            return 84;\\n        }\\n        if (p < 67) {\\n            return 85;\\n        }\\n        if (p < 68) {\\n            return 86;\\n        }\\n        if (p < 69) {\\n            return 88;\\n        }\\n        if (p < 70) {\\n            return 89;\\n        }\\n        if (p < 71) {\\n            return 90;\\n        }\\n        if (p < 72) {\\n            return 91;\\n        }\\n        if (p < 74) {\\n            return 92;\\n        }\\n        if (p < 75) {\\n            return 93;\\n        }\\n        if (p < 76) {\\n            return 94;\\n        }\\n        if (p < 78) {\\n            return 95;\\n        }\\n        if (p < 80) {\\n            return 96;\\n        }\\n        if (p < 82) {\\n            return 97;\\n        }\\n        if (p < 86) {\\n            return 98;\\n        }\\n        return 99;\\n    }\\n\\n    function cubicIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 22) {\\n            return 0;\\n        }\\n        if (p < 28) {\\n            return 1;\\n        }\\n        if (p < 32) {\\n            return 2;\\n        }\\n        if (p < 32) {\\n            return 3;\\n        }\\n        if (p < 34) {\\n            return 3;\\n        }\\n        if (p < 36) {\\n            return 4;\\n        }\\n        if (p < 39) {\\n            return 5;\\n        }\\n        if (p < 41) {\\n            return 6;\\n        }\\n        if (p < 43) {\\n            return 7;\\n        }\\n        if (p < 46) {\\n            return 9;\\n        }\\n        if (p < 47) {\\n            return 10;\\n        }\\n        if (p < 49) {\\n            return 11;\\n        }\\n        if (p < 50) {\\n            return 12;\\n        }\\n        if (p < 51) {\\n            return 13;\\n        }\\n        if (p < 53) {\\n            return 14;\\n        }\\n        if (p < 54) {\\n            return 15;\\n        }\\n        if (p < 55) {\\n            return 16;\\n        }\\n        if (p < 56) {\\n            return 17;\\n        }\\n        if (p < 57) {\\n            return 18;\\n        }\\n        if (p < 58) {\\n            return 19;\\n        }\\n        if (p < 59) {\\n            return 20;\\n        }\\n        if (p < 60) {\\n            return 21;\\n        }\\n        if (p < 61) {\\n            return 22;\\n        }\\n        if (p < 62) {\\n            return 23;\\n        }\\n        if (p < 63) {\\n            return 25;\\n        }\\n        if (p < 64) {\\n            return 26;\\n        }\\n        if (p < 65) {\\n            return 27;\\n        }\\n        if (p < 66) {\\n            return 28;\\n        }\\n        if (p < 67) {\\n            return 30;\\n        }\\n        if (p < 68) {\\n            return 31;\\n        }\\n        if (p < 69) {\\n            return 32;\\n        }\\n        if (p < 70) {\\n            return 34;\\n        }\\n        if (p < 71) {\\n            return 35;\\n        }\\n        if (p < 72) {\\n            return 37;\\n        }\\n        if (p < 73) {\\n            return 38;\\n        }\\n        if (p < 74) {\\n            return 40;\\n        }\\n        if (p < 75) {\\n            return 42;\\n        }\\n        if (p < 76) {\\n            return 43;\\n        }\\n        if (p < 77) {\\n            return 45;\\n        }\\n        if (p < 78) {\\n            return 47;\\n        }\\n        if (p < 79) {\\n            return 49;\\n        }\\n        if (p < 80) {\\n            return 51;\\n        }\\n        if (p < 81) {\\n            return 53;\\n        }\\n        if (p < 82) {\\n            return 55;\\n        }\\n        if (p < 83) {\\n            return 57;\\n        }\\n        if (p < 84) {\\n            return 59;\\n        }\\n        if (p < 85) {\\n            return 61;\\n        }\\n        if (p < 86) {\\n            return 63;\\n        }\\n        if (p < 87) {\\n            return 65;\\n        }\\n        if (p < 88) {\\n            return 68;\\n        }\\n        if (p < 89) {\\n            return 70;\\n        }\\n        if (p < 90) {\\n            return 72;\\n        }\\n        if (p < 91) {\\n            return 75;\\n        }\\n        if (p < 92) {\\n            return 77;\\n        }\\n        if (p < 93) {\\n            return 80;\\n        }\\n        if (p < 94) {\\n            return 83;\\n        }\\n        if (p < 95) {\\n            return 85;\\n        }\\n        if (p < 96) {\\n            return 88;\\n        }\\n        if (p < 97) {\\n            return 91;\\n        }\\n        if (p < 98) {\\n            return 94;\\n        }\\n        return 97;\\n    }\\n\\n    function quintIn(uint256 p) internal pure returns (uint8) {\\n        if (p < 39) {\\n            return 0;\\n        }\\n        if (p < 45) {\\n            return 1;\\n        }\\n        if (p < 49) {\\n            return 2;\\n        }\\n        if (p < 52) {\\n            return 3;\\n        }\\n        if (p < 53) {\\n            return 4;\\n        }\\n        if (p < 54) {\\n            return 4;\\n        }\\n        if (p < 55) {\\n            return 5;\\n        }\\n        if (p < 56) {\\n            return 5;\\n        }\\n        if (p < 57) {\\n            return 6;\\n        }\\n        if (p < 58) {\\n            return 6;\\n        }\\n        if (p < 59) {\\n            return 7;\\n        }\\n        if (p < 60) {\\n            return 7;\\n        }\\n        if (p < 61) {\\n            return 8;\\n        }\\n        if (p < 62) {\\n            return 9;\\n        }\\n        if (p < 63) {\\n            return 9;\\n        }\\n        if (p < 64) {\\n            return 10;\\n        }\\n        if (p < 65) {\\n            return 11;\\n        }\\n        if (p < 66) {\\n            return 12;\\n        }\\n        if (p < 67) {\\n            return 13;\\n        }\\n        if (p < 68) {\\n            return 14;\\n        }\\n        if (p < 69) {\\n            return 15;\\n        }\\n        if (p < 70) {\\n            return 16;\\n        }\\n        if (p < 71) {\\n            return 18;\\n        }\\n        if (p < 72) {\\n            return 19;\\n        }\\n        if (p < 73) {\\n            return 20;\\n        }\\n        if (p < 74) {\\n            return 22;\\n        }\\n        if (p < 75) {\\n            return 23;\\n        }\\n        if (p < 76) {\\n            return 25;\\n        }\\n        if (p < 77) {\\n            return 27;\\n        }\\n        if (p < 78) {\\n            return 28;\\n        }\\n        if (p < 79) {\\n            return 30;\\n        }\\n        if (p < 80) {\\n            return 32;\\n        }\\n        if (p < 81) {\\n            return 34;\\n        }\\n        if (p < 82) {\\n            return 37;\\n        }\\n        if (p < 83) {\\n            return 39;\\n        }\\n        if (p < 84) {\\n            return 41;\\n        }\\n        if (p < 85) {\\n            return 44;\\n        }\\n        if (p < 86) {\\n            return 47;\\n        }\\n        if (p < 87) {\\n            return 49;\\n        }\\n        if (p < 88) {\\n            return 52;\\n        }\\n        if (p < 89) {\\n            return 55;\\n        }\\n        if (p < 90) {\\n            return 59;\\n        }\\n        if (p < 91) {\\n            return 62;\\n        }\\n        if (p < 92) {\\n            return 65;\\n        }\\n        if (p < 93) {\\n            return 69;\\n        }\\n        if (p < 94) {\\n            return 73;\\n        }\\n        if (p < 95) {\\n            return 77;\\n        }\\n        if (p < 96) {\\n            return 81;\\n        }\\n        if (p < 97) {\\n            return 85;\\n        }\\n        if (p < 98) {\\n            return 90;\\n        }\\n        return 95;\\n    }\\n\\n    // Util for keeping hue range in 0-360 positive\\n    function clampHue(int256 h) internal pure returns (uint256) {\\n        unchecked {\\n            h /= 100;\\n            if (h >= 0) {\\n                return uint256(h) % 360;\\n            } else {\\n                return (uint256(-1 * h) % 360);\\n            }\\n        }\\n    }\\n\\n    function lerpHue(\\n        uint8 optionNum,\\n        uint256 direction,\\n        uint256 uhue,\\n        uint8 pct\\n    ) internal pure returns (uint256) {\\n        // unchecked {\\n        uint256 option = optionNum % 4;\\n        int256 hue = int256(uhue);\\n\\n        if (option == 0) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 10 : hue + 10)))\\n                );\\n        }\\n        if (option == 1) {\\n            return\\n                clampHue(\\n                    (((100 - int256(uint256(pct))) * hue) +\\n                        (int256(uint256(pct)) *\\n                            (direction == 0 ? hue - 30 : hue + 30)))\\n                );\\n        }\\n        if (option == 2) {\\n            return\\n                clampHue(\\n                    (\\n                        (((100 - cubicInOut(pct)) * hue) +\\n                            (cubicInOut(pct) *\\n                                (direction == 0 ? hue - 50 : hue + 50)))\\n                    )\\n                );\\n        }\\n\\n        return\\n            clampHue(\\n                ((100 - cubicInOut(pct)) * hue) +\\n                    (cubicInOut(pct) *\\n                        int256(\\n                            hue +\\n                                ((direction == 0 ? int256(-60) : int256(60)) *\\n                                    int256(uint256(optionNum > 128 ? 1 : 0))) +\\n                                30\\n                        ))\\n            );\\n        // }\\n    }\\n\\n    function lerpLightness(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        uint256 lerpPercent;\\n        if (optionNum == 0) {\\n            lerpPercent = quintIn(pct);\\n        } else {\\n            lerpPercent = cubicIn(pct);\\n        }\\n        return\\n            1 + (((100.0 - lerpPercent) * start + (lerpPercent * end)) / 100);\\n    }\\n\\n    function lerpSaturation(\\n        uint8 optionNum,\\n        uint256 start,\\n        uint256 end,\\n        uint256 pct\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 lerpPercent;\\n            if (optionNum == 0) {\\n                lerpPercent = quintIn(pct);\\n                return\\n                    1 +\\n                    (((100.0 - lerpPercent) * start + lerpPercent * end) / 100);\\n            }\\n            lerpPercent = pct;\\n            return ((100.0 - lerpPercent) * start + lerpPercent * end) / 100;\\n        }\\n    }\\n\\n    function encodeStr(\\n        uint256 h,\\n        uint256 s,\\n        uint256 l\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"hsl(\\\",\\n                Strings.toString(h),\\n                \\\", \\\",\\n                Strings.toString(s),\\n                \\\"%, \\\",\\n                Strings.toString(l),\\n                \\\"%)\\\"\\n            );\\n    }\\n\\n    function gradientForAddress(address addr)\\n        internal\\n        pure\\n        returns (bytes[5] memory)\\n    {\\n        unchecked {\\n            bytes32 addrBytes = bytes32(uint256(uint160(addr)));\\n            uint256 startHue = (uint256(uint8(addrBytes[31 - 12])) * 24) / 17; // 255 - 360\\n            uint256 startLightness = (uint256(uint8(addrBytes[31 - 2])) * 5) /\\n                34 +\\n                32; // 255 => 37.5 + 32 (32, 69.5)\\n            uint256 endLightness = 97;\\n            endLightness += (((uint256(uint8(addrBytes[31 - 8])) * 5) / 51) +\\n                72); // 72-97\\n            endLightness /= 2;\\n\\n            uint256 startSaturation = uint256(uint8(addrBytes[31 - 7])) /\\n                16 +\\n                81; // 0-16 + 72\\n\\n            uint256 endSaturation = uint256(uint8(addrBytes[31 - 10]) * 11) / 128 + 70; // 0-22 + 70\\n            if (endSaturation > startSaturation - 10) {\\n                endSaturation = startSaturation - 10;\\n            }\\n\\n            return [\\n                // 0\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        0\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        100\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        100\\n                    )\\n                ),\\n                // 1\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        10\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        90\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        90\\n                    )\\n                ),\\n                // 2\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        70\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        70\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        70\\n                    )\\n                ),\\n                // 3\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        90\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        20\\n                    ),\\n                    lerpLightness(\\n                        uint8(addrBytes[31 - 5]) % 2,\\n                        startLightness,\\n                        endLightness,\\n                        20\\n                    )\\n                ),\\n                // 4\\n                encodeStr(\\n                    lerpHue(\\n                        uint8(addrBytes[31 - 3]),\\n                        uint8(addrBytes[31 - 6]) % 2,\\n                        startHue,\\n                        100\\n                    ),\\n                    lerpSaturation(\\n                        uint8(addrBytes[31 - 3]) % 2,\\n                        startSaturation,\\n                        endSaturation,\\n                        0\\n                    ),\\n                    startLightness\\n                )\\n            ];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32b1fa83740638d288c3466cc0953bcc64d0defbf9d7d4527a09753a5d744fc2\",\"license\":\"GPL-3.0\"},\"contracts/ZorbNFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {ERC721Burnable, ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\\\";\\nimport {ColorLib} from \\\"./ColorLib.sol\\\";\\n\\ninterface INFT {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\\n/// This custom NFT contract stores additional metadata to use for tokenURI\\ncontract ZorbNFT is ERC721, ERC721Burnable, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    // new years 2022 base\\n\\n    // PROD\\n    // uint256 private constant MINT_START_AT = 1640995200;\\n    // uint256 private constant MINT_DURATION = 48 hours;\\n\\n    // RINKEBY\\n    uint256 private constant MINT_START_AT = 1640925953;\\n    uint256 private constant MINT_DURATION = 400 hours;\\n\\n\\n    mapping(address => bool) private knownMarketplace;\\n    mapping(uint256 => address) private lastOwner;\\n\\n    Counters.Counter currentTokenId;\\n    IPublicSharedMetadata private immutable sharedMetadata;\\n\\n    modifier onlyApproved(uint256 tokenId) {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"Ony approved\\\");\\n        _;\\n    }\\n\\n    constructor(IPublicSharedMetadata _sharedMetadata) ERC721(\\\"Zorbs\\\", \\\"ZORB\\\") {\\n        sharedMetadata = _sharedMetadata;\\n        currentTokenId.increment();\\n    }\\n\\n    function setKnownMarketplaces(address[] calldata marketPlaces, bool isKnown)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < marketPlaces.length; i++) {\\n            knownMarketplace[marketPlaces[i]] = isKnown;\\n        }\\n    }\\n\\n    function mintIsOpen() public view returns (bool) {\\n        return\\n            block.timestamp > MINT_START_AT &&\\n            block.timestamp <= MINT_START_AT + MINT_DURATION;\\n    }\\n\\n    function mint() public {\\n        require(mintIsOpen(), \\\"not open\\\");\\n        _mint(msg.sender, currentTokenId.current());\\n        currentTokenId.increment();\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return currentTokenId.current();\\n    }\\n\\n    function airdrop(address[] memory to) public {\\n        require(mintIsOpen() || msg.sender == owner(), \\\"Only open\\\");\\n        for (uint256 i = 0; i < to.length; i++) {\\n            _mint(to[i], currentTokenId.current());\\n            currentTokenId.increment();\\n        }\\n    }\\n\\n    function zorbForAddress(address user) public view returns (string memory) {\\n        bytes[5] memory colors = ColorLib.gradientForAddress(user);\\n        string memory encoded = sharedMetadata.base64Encode(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 220 220\\\"><defs>'\\n                '<radialGradient fx=\\\"66.46%\\\" fy=\\\"24.36%\\\" id=\\\"grad\\\">'\\n                '<stop offset=\\\"15.62%\\\" stop-color=\\\"',\\n                colors[0],\\n                '\\\" /><stop offset=\\\"39.58%\\\" stop-color=\\\"',\\n                colors[1],\\n                '\\\" /><stop offset=\\\"72.92%\\\" stop-color=\\\"',\\n                colors[2],\\n                '\\\" /><stop offset=\\\"90.63%\\\" stop-color=\\\"',\\n                colors[3],\\n                '\\\" /><stop offset=\\\"100%\\\" stop-color=\\\"',\\n                colors[4],\\n                '\\\" /></radialGradient></defs>'\\n                '<g transform=\\\"translate(10 10) scale(0.9)\\\"><circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"50%\\\" fill=\\\"url(#grad)\\\" /></g>'\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", encoded));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        if (knownMarketplace[to]) {\\n            lastOwner[tokenId] = from;\\n        }\\n    }\\n\\n    function getZorbRenderAddress(uint256 tokenId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address zorbFor = INFT(address(this)).ownerOf(tokenId);\\n        if (knownMarketplace[zorbFor] && lastOwner[tokenId] != address(0x0)) {\\n            zorbFor = lastOwner[tokenId];\\n        }\\n        return zorbFor;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            sharedMetadata.encodeMetadataJSON(\\n                abi.encodePacked(\\n                    '{\\\"name\\\": \\\"Zora Zorb #',\\n                    sharedMetadata.numberToString(tokenId),\\n                    '\\\", \\\"description\\\": \\\"Zora Zorb New Years Drop 2022',\\n                    '\\\\\\\\n\\\\\\\\nCelebrate Zora with your own unique Zorb\\\\\\\\n\\\\\\\\n[https://zorb.dev/](zorb.dev)\\\\\\\\n\\\\\\\\nWhen Zorbs are sold or transferred, they update to reflect the zorb of the current owner.\\\", \\\"image\\\": \\\"',\\n                    zorbForAddress(getZorbRenderAddress(tokenId)),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x283c93fc18e04188982e3f6bb24d70f8bf29bf33f2af32ec3fdc93f7dd1eee48\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200384f3803806200384f8339810160408190526200003491620001e1565b60408051808201825260058152645a6f72627360d81b6020808301918252835180850190945260048452632d27a92160e11b9084015281519192916200007d916000916200013b565b508051620000939060019060208401906200013b565b505050620000b0620000aa620000dc60201b60201c565b620000e0565b6001600160a01b038116608052620000d5600962000132602090811b62000e3117901c565b5062000250565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546001019055565b828054620001499062000213565b90600052602060002090601f0160209004810192826200016d5760008555620001b8565b82601f106200018857805160ff1916838001178555620001b8565b82800160010185558215620001b8579182015b82811115620001b85782518255916020019190600101906200019b565b50620001c6929150620001ca565b5090565b5b80821115620001c65760008155600101620001cb565b600060208284031215620001f457600080fd5b81516001600160a01b03811681146200020c57600080fd5b9392505050565b600181811c908216806200022857607f821691505b602082108114156200024a57634e487b7160e01b600052602260045260246000fd5b50919050565b6080516135dc6200027360003960008181610b240152610c7d01526135dc6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063aa1152ab1161007c578063aa1152ab146102bb578063b88d4fde146102c3578063c87b56dd146102d6578063de909942146102e9578063e985e9c5146102fc578063f2fde38b1461030f57600080fd5b8063715018a61461026a578063729ad39e146102725780638da5cb5b1461028557806391557ac41461028d57806395d89b41146102a0578063a22cb465146102a857600080fd5b806323b872dd1161011557806323b872dd146101f857806342842e0e1461020b57806342966c681461021e5780636352211e146102315780636411fb451461024457806370a082311461025757600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c55780631249c58b146101da57806318160ddd146101e2575b600080fd5b61017061016b36600461289a565b610322565b60405190151581526020015b60405180910390f35b61018d610374565b60405161017c9190612916565b6101ad6101a8366004612929565b610406565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004612957565b610493565b005b6101d86105a4565b6101ea610605565b60405190815260200161017c565b6101d8610206366004612983565b610615565b6101d8610219366004612983565b610647565b6101d861022c366004612929565b610662565b6101ad61023f366004612929565b6106dc565b6101d86102523660046129d4565b610753565b6101ea610265366004612a57565b6107f9565b6101d8610880565b6101d8610280366004612aba565b6108b9565b6101ad610972565b6101ad61029b366004612929565b610981565b61018d610a58565b6101d86102b6366004612b6b565b610a67565b610170610a72565b6101d86102d1366004612bc7565b610a9b565b61018d6102e4366004612929565b610acd565b61018d6102f7366004612a57565b610c4e565b61017061030a366004612c75565b610d66565b6101d861031d366004612a57565b610d94565b60006001600160e01b031982166380ac58cd60e01b148061035357506001600160e01b03198216635b5e139f60e01b145b8061036e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461038390612cae565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90612cae565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050905090565b600061041182610e3a565b6104775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061049e826106dc565b9050806001600160a01b0316836001600160a01b0316141561050c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161046e565b336001600160a01b038216148061052857506105288133610d66565b6105955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161046e565b61059f8383610e57565b505050565b6105ac610a72565b6105e35760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b604482015260640161046e565b6105f5336105f060095490565b610ec5565b610603600980546001019055565b565b600061061060095490565b905090565b610620335b82610ff2565b61063c5760405162461bcd60e51b815260040161046e90612ce9565b61059f8383836110bc565b61059f83838360405180602001604052806000815250610a9b565b61066b3361061a565b6106d05760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b606482015260840161046e565b6106d981611255565b50565b6000818152600260205260408120546001600160a01b03168061036e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161046e565b3361075c610972565b6001600160a01b0316146107825760405162461bcd60e51b815260040161046e90612d3a565b60005b828110156107f35781600760008686858181106107a4576107a4612d6f565b90506020020160208101906107b99190612a57565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806107eb81612d9b565b915050610785565b50505050565b60006001600160a01b0382166108645760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b33610889610972565b6001600160a01b0316146108af5760405162461bcd60e51b815260040161046e90612d3a565b61060360006112ea565b6108c1610a72565b806108e457506108cf610972565b6001600160a01b0316336001600160a01b0316145b61091c5760405162461bcd60e51b815260206004820152600960248201526827b7363c9037b832b760b91b604482015260640161046e565b60005b815181101561096e5761094e82828151811061093d5761093d612d6f565b60200260200101516105f060095490565b61095c600980546001019055565b8061096681612d9b565b91505061091f565b5050565b6006546001600160a01b031690565b6040516331a9108f60e11b81526004810182905260009081903090636352211e9060240160206040518083038186803b1580156109bd57600080fd5b505afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190612db6565b6001600160a01b03811660009081526007602052604090205490915060ff168015610a3657506000838152600860205260409020546001600160a01b031615155b1561036e5750506000908152600860205260409020546001600160a01b031690565b60606001805461038390612cae565b61096e33838361133c565b60006361ce8b01421180156106105750610a936215f9006361ce8b01612dd3565b421115905090565b610aa53383610ff2565b610ac15760405162461bcd60e51b815260040161046e90612ce9565b6107f384848484611407565b6060610ad882610e3a565b610b0f5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b604482015260640161046e565b60405162b86e3360e51b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d01fde8c90829063170dc6609060240160006040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb29190810190612deb565b610bbe6102f786610981565b604051602001610bcf929190612e7d565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610bfa9190612916565b60006040518083038186803b158015610c1257600080fd5b505afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036e9190810190612deb565b60606000610c5b8361143a565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b1996610cbc9691959194939201612ff9565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610ce79190612916565b60006040518083038186803b158015610cff57600080fd5b505afa158015610d13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3b9190810190612deb565b905080604051602001610d4e9190613283565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33610d9d610972565b6001600160a01b031614610dc35760405162461bcd60e51b815260040161046e90612d3a565b6001600160a01b038116610e285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046e565b6106d9816112ea565b80546001019055565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e8c826106dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216610f1b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b610f2481610e3a565b15610f715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b610f7d6000838361171e565b6001600160a01b0382166000908152600360205260408120805460019290610fa6908490612dd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613587833981519152908290a45050565b6000610ffd82610e3a565b61105e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161046e565b6000611069836106dc565b9050806001600160a01b0316846001600160a01b031614806110a45750836001600160a01b031661109984610406565b6001600160a01b0316145b806110b457506110b48185610d66565b949350505050565b826001600160a01b03166110cf826106dc565b6001600160a01b0316146111375760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161046e565b6001600160a01b0382166111995760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6111a483838361171e565b6111af600082610e57565b6001600160a01b03831660009081526003602052604081208054600192906111d89084906132c8565b90915550506001600160a01b0382166000908152600360205260408120805460019290611206908490612dd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061358783398151915291a4505050565b6000611260826106dc565b905061126e8160008461171e565b611279600083610e57565b6001600160a01b03811660009081526003602052604081208054600192906112a29084906132c8565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613587833981519152908390a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561139a5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114128484846110bc565b61141e8484848461176d565b6107f35760405162461bcd60e51b815260040161046e906132df565b61144261285d565b6001600160a01b038216600060118260131a6018028161146457611464613331565b0490506000602283601d1a6005028161147f5761147f613331565b046020019050606160338460171a6005028161149d5761149d613331565b0401604801600281049050600060108560181a816114bd576114bd613331565b04605101905060006080866015600b91901a0260ff16816114e0576114e0613331565b046046019050600a82038111156114f8575060091981015b6040805160a081019091528061157261152d89601c1a60028b60191a8161152157611521613331565b0660ff168a600061187a565b61154d60028b601c1a8161154357611543613331565b06878760646119ce565b61156d60028c601a1a8161156357611563613331565b068a8a6064611a16565b611a8e565b81526020016115e06115a089601c1a60028b60191a8161159457611594613331565b0660ff168a600a61187a565b6115c060028b601c1a816115b6576115b6613331565b068787605a6119ce565b61156d60028c601a1a816115d6576115d6613331565b068a8a605a611a16565b815260200161164e61160e89601c1a60028b60191a8161160257611602613331565b0660ff168a604661187a565b61162e60028b601c1a8161162457611624613331565b06878760466119ce565b61156d60028c601a1a8161164457611644613331565b068a8a6046611a16565b81526020016116bc61167c89601c1a60028b60191a8161167057611670613331565b0660ff168a605a61187a565b61169c60028b601c1a8161169257611692613331565b06878760146119ce565b61156d60028c601a1a816116b2576116b2613331565b068a8a6014611a16565b81526020016117106116ea89601c1a60028b60191a816116de576116de613331565b0660ff168a606461187a565b61170a60028b601c1a8161170057611700613331565b06878760006119ce565b88611a8e565b905298975050505050505050565b6001600160a01b03821660009081526007602052604090205460ff161561059f57600081815260086020526040902080546001600160a01b0385166001600160a01b0319909116179055505050565b60006001600160a01b0384163b1561186f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906117b1903390899088908890600401613347565b602060405180830381600087803b1580156117cb57600080fd5b505af19250505080156117fb575060408051601f3d908101601f191682019092526117f89181019061337a565b60015b611855573d808015611829576040519150601f19603f3d011682016040523d82523d6000602084013e61182e565b606091505b50805161184d5760405162461bcd60e51b815260040161046e906132df565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110b4565b506001949350505050565b600080611888600487613397565b60ff16905083816118f5576118ec86156118ac576118a782600a6133b9565b6118b7565b6118b7600a836133fa565b6118c49060ff8716613439565b826118d360ff881660646133fa565b6118dd9190613439565b6118e791906133b9565b611ad5565b925050506110b4565b816001141561191d576118ec8615611912576118a782601e6133b9565b6118b7601e836133fa565b8160021415611978576118ec861561193f5761193a8260326133b9565b61194a565b61194a6032836133fa565b6119568660ff16611b08565b6119609190613439565b8261196d8760ff16611b08565b6118d39060646133fa565b6119c360808860ff161161198d576000611990565b60015b60ff1687156119a057603c6119a4565b603b195b6119ae9190613439565b6119b890836133b9565b61194a90601e6133b9565b979650505050505050565b60008060ff86166119fe576119e283611ffe565b60ff1690506064818103860285830201046001019150506110b4565b50816064818103860285830201049695505050505050565b60008060ff8616611a3457611a2a83611ffe565b60ff169050611a43565b611a3d8361235a565b60ff1690505b6064611a4f85836134be565b86611a5b8460646132c8565b611a6591906134be565b611a6f9190612dd3565b611a7991906134dd565b611a84906001612dd3565b9695505050505050565b6060611a9984612760565b611aa284612760565b611aab84612760565b604051602001611abd939291906134f1565b60405160208183030381529060405290509392505050565b606490056000808212611aee57610168825b0692915050565b610168826000190281611ae757611ae7613331565b919050565b6000600d8261ffff161015611b1f57506000919050565b60118261ffff161015611b3457506001919050565b60138261ffff161015611b4957506002919050565b60158261ffff161015611b5e57506003919050565b60178261ffff161015611b7357506004919050565b60188261ffff161015611b8857506005919050565b60198261ffff161015611b9d57506006919050565b601b8261ffff161015611bb257506007919050565b601c8261ffff161015611bc757506008919050565b601d8261ffff161015611bdc57506009919050565b601e8261ffff161015611bf15750600a919050565b601f8261ffff161015611c065750600b919050565b60208261ffff161015611c1b5750600d919050565b60218261ffff161015611c305750600e919050565b60228261ffff161015611c455750600f919050565b60238261ffff161015611c5a57506011919050565b60248261ffff161015611c6f57506012919050565b60258261ffff161015611c8457506014919050565b60268261ffff161015611c9957506015919050565b60278261ffff161015611cae57506017919050565b60288261ffff161015611cc357506019919050565b60298261ffff161015611cd85750601b919050565b602a8261ffff161015611ced5750601d919050565b602b8261ffff161015611d025750601f919050565b602c8261ffff161015611d1757506022919050565b602d8261ffff161015611d2c57506024919050565b602e8261ffff161015611d4157506026919050565b602f8261ffff161015611d5657506029919050565b60308261ffff161015611d6b5750602c919050565b60318261ffff161015611d805750602f919050565b60328261ffff161015611d9557506032919050565b60338261ffff161015611daa57506034919050565b60348261ffff161015611dbf57506037919050565b60358261ffff161015611dd45750603a919050565b60368261ffff161015611de95750603d919050565b60378261ffff161015611dfe5750603f919050565b60388261ffff161015611e1357506041919050565b60398261ffff161015611e2857506044919050565b603a8261ffff161015611e3d57506046919050565b603b8261ffff161015611e5257506048919050565b603c8261ffff161015611e675750604a919050565b603d8261ffff161015611e7c5750604c919050565b603e8261ffff161015611e915750604e919050565b603f8261ffff161015611ea65750604f919050565b60408261ffff161015611ebb57506051919050565b60418261ffff161015611ed057506052919050565b60428261ffff161015611ee557506054919050565b60438261ffff161015611efa57506055919050565b60448261ffff161015611f0f57506056919050565b60458261ffff161015611f2457506058919050565b60468261ffff161015611f3957506059919050565b60478261ffff161015611f4e5750605a919050565b60488261ffff161015611f635750605b919050565b604a8261ffff161015611f785750605c919050565b604b8261ffff161015611f8d5750605d919050565b604c8261ffff161015611fa25750605e919050565b604e8261ffff161015611fb75750605f919050565b60508261ffff161015611fcc57506060919050565b60528261ffff161015611fe157506061919050565b60568261ffff161015611ff657506062919050565b506063919050565b6000602782101561201157506000919050565b602d82101561202257506001919050565b603182101561203357506002919050565b603482101561204457506003919050565b603582101561205557506004919050565b603682101561206657506004919050565b603782101561207757506005919050565b603882101561208857506005919050565b603982101561209957506006919050565b603a8210156120aa57506006919050565b603b8210156120bb57506007919050565b603c8210156120cc57506007919050565b603d8210156120dd57506008919050565b603e8210156120ee57506009919050565b603f8210156120ff57506009919050565b60408210156121105750600a919050565b60418210156121215750600b919050565b60428210156121325750600c919050565b60438210156121435750600d919050565b60448210156121545750600e919050565b60458210156121655750600f919050565b604682101561217657506010919050565b604782101561218757506012919050565b604882101561219857506013919050565b60498210156121a957506014919050565b604a8210156121ba57506016919050565b604b8210156121cb57506017919050565b604c8210156121dc57506019919050565b604d8210156121ed5750601b919050565b604e8210156121fe5750601c919050565b604f82101561220f5750601e919050565b605082101561222057506020919050565b605182101561223157506022919050565b605282101561224257506025919050565b605382101561225357506027919050565b605482101561226457506029919050565b60558210156122755750602c919050565b60568210156122865750602f919050565b605782101561229757506031919050565b60588210156122a857506034919050565b60598210156122b957506037919050565b605a8210156122ca5750603b919050565b605b8210156122db5750603e919050565b605c8210156122ec57506041919050565b605d8210156122fd57506045919050565b605e82101561230e57506049919050565b605f82101561231f5750604d919050565b606082101561233057506051919050565b606182101561234157506055919050565b60628210156123525750605a919050565b50605f919050565b6000601682101561236d57506000919050565b601c82101561237e57506001919050565b602082101561238f57506002919050565b60208210156123a057506003919050565b60228210156123b157506003919050565b60248210156123c257506004919050565b60278210156123d357506005919050565b60298210156123e457506006919050565b602b8210156123f557506007919050565b602e82101561240657506009919050565b602f8210156124175750600a919050565b60318210156124285750600b919050565b60328210156124395750600c919050565b603382101561244a5750600d919050565b603582101561245b5750600e919050565b603682101561246c5750600f919050565b603782101561247d57506010919050565b603882101561248e57506011919050565b603982101561249f57506012919050565b603a8210156124b057506013919050565b603b8210156124c157506014919050565b603c8210156124d257506015919050565b603d8210156124e357506016919050565b603e8210156124f457506017919050565b603f82101561250557506019919050565b60408210156125165750601a919050565b60418210156125275750601b919050565b60428210156125385750601c919050565b60438210156125495750601e919050565b604482101561255a5750601f919050565b604582101561256b57506020919050565b604682101561257c57506022919050565b604782101561258d57506023919050565b604882101561259e57506025919050565b60498210156125af57506026919050565b604a8210156125c057506028919050565b604b8210156125d15750602a919050565b604c8210156125e25750602b919050565b604d8210156125f35750602d919050565b604e8210156126045750602f919050565b604f82101561261557506031919050565b605082101561262657506033919050565b605182101561263757506035919050565b605282101561264857506037919050565b605382101561265957506039919050565b605482101561266a5750603b919050565b605582101561267b5750603d919050565b605682101561268c5750603f919050565b605782101561269d57506041919050565b60588210156126ae57506044919050565b60598210156126bf57506046919050565b605a8210156126d057506048919050565b605b8210156126e15750604b919050565b605c8210156126f25750604d919050565b605d82101561270357506050919050565b605e82101561271457506053919050565b605f82101561272557506055919050565b606082101561273657506058919050565b60618210156127475750605b919050565b60628210156127585750605e919050565b506061919050565b6060816127845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127ae578061279881612d9b565b91506127a79050600a836134dd565b9150612788565b6000816001600160401b038111156127c8576127c8612a74565b6040519080825280601f01601f1916602001820160405280156127f2576020820181803683370190505b5090505b84156110b4576128076001836132c8565b9150612814600a86613572565b61281f906030612dd3565b60f81b81838151811061283457612834612d6f565b60200101906001600160f81b031916908160001a905350612856600a866134dd565b94506127f6565b6040518060a001604052806005905b606081526020019060019003908161286c5790505090565b6001600160e01b0319811681146106d957600080fd5b6000602082840312156128ac57600080fd5b81356128b781612884565b9392505050565b60005b838110156128d95781810151838201526020016128c1565b838111156107f35750506000910152565b600081518084526129028160208601602086016128be565b601f01601f19169290920160200192915050565b6020815260006128b760208301846128ea565b60006020828403121561293b57600080fd5b5035919050565b6001600160a01b03811681146106d957600080fd5b6000806040838503121561296a57600080fd5b823561297581612942565b946020939093013593505050565b60008060006060848603121561299857600080fd5b83356129a381612942565b925060208401356129b381612942565b929592945050506040919091013590565b80358015158114611b0357600080fd5b6000806000604084860312156129e957600080fd5b83356001600160401b0380821115612a0057600080fd5b818601915086601f830112612a1457600080fd5b813581811115612a2357600080fd5b8760208260051b8501011115612a3857600080fd5b602092830195509350612a4e91860190506129c4565b90509250925092565b600060208284031215612a6957600080fd5b81356128b781612942565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ab257612ab2612a74565b604052919050565b60006020808385031215612acd57600080fd5b82356001600160401b0380821115612ae457600080fd5b818501915085601f830112612af857600080fd5b813581811115612b0a57612b0a612a74565b8060051b9150612b1b848301612a8a565b8181529183018401918481019088841115612b3557600080fd5b938501935b83851015612b5f5784359250612b4f83612942565b8282529385019390850190612b3a565b98975050505050505050565b60008060408385031215612b7e57600080fd5b8235612b8981612942565b9150612b97602084016129c4565b90509250929050565b60006001600160401b03821115612bb957612bb9612a74565b50601f01601f191660200190565b60008060008060808587031215612bdd57600080fd5b8435612be881612942565b93506020850135612bf881612942565b92506040850135915060608501356001600160401b03811115612c1a57600080fd5b8501601f81018713612c2b57600080fd5b8035612c3e612c3982612ba0565b612a8a565b818152886020838501011115612c5357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612c8857600080fd5b8235612c9381612942565b91506020830135612ca381612942565b809150509250929050565b600181811c90821680612cc257607f821691505b60208210811415612ce357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612daf57612daf612d85565b5060010190565b600060208284031215612dc857600080fd5b81516128b781612942565b60008219821115612de657612de6612d85565b500190565b600060208284031215612dfd57600080fd5b81516001600160401b03811115612e1357600080fd5b8201601f81018413612e2457600080fd5b8051612e32612c3982612ba0565b818152856020838501011115612e4757600080fd5b612e588260208301602086016128be565b95945050505050565b60008151612e738185602086016128be565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090612eae8160158501602088016128be565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351612fe28160fc8401602088016128be565b611a8460fc8284010161227d60f01b815260020190565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032323020323230223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236362e343625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b6080820152600086516130c4816098850160208b016128be565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b8820181905287516131128160be850160208c016128be565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de820152612b5f6131d86131d261319c61319661315e60e487018c612e61565b7f22202f3e3c73746f70206f66667365743d2239302e363325222073746f702d6381526537b637b91e9160d11b602082015260260190565b89612e61565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86612e61565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c67207481527f72616e73666f726d3d227472616e736c61746528313020313029207363616c6560208201527f28302e3929223e3c636972636c652063783d22353025222063793d223530252260408201527f20723d22353025222066696c6c3d2275726c2823677261642922202f3e3c2f676060820152661f1e17b9bb339f60c91b608082015260870190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516132bb81601a8501602087016128be565b91909101601a0192915050565b6000828210156132da576132da612d85565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a84908301846128ea565b60006020828403121561338c57600080fd5b81516128b781612884565b600060ff8316806133aa576133aa613331565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156133db576133db612d85565b600160ff1b83900384128116156133f4576133f4612d85565b50500190565b60008083128015600160ff1b85018412161561341857613418612d85565b6001600160ff1b038401831381161561343357613433612d85565b50500390565b60006001600160ff1b038184138284138082168684048611161561345f5761345f612d85565b600160ff1b600087128281168783058912161561347e5761347e612d85565b6000871292508782058712848416161561349a5761349a612d85565b878505871281841616156134b0576134b0612d85565b505050929093029392505050565b60008160001904831182151516156134d8576134d8612d85565b500290565b6000826134ec576134ec613331565b500490565b630d0e6d8560e31b8152600084516135108160048501602089016128be565b61016160f51b60049184019182015284516135328160068401602089016128be565b6201296160ed1b6006929091019182015283516135568160098401602088016128be565b61252960f01b60099290910191820152600b0195945050505050565b60008261358157613581613331565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212200c9fb9d06c738ca6e843d104aec7a9f74dcfab23cbd53363af14e45cb7f695e964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063aa1152ab1161007c578063aa1152ab146102bb578063b88d4fde146102c3578063c87b56dd146102d6578063de909942146102e9578063e985e9c5146102fc578063f2fde38b1461030f57600080fd5b8063715018a61461026a578063729ad39e146102725780638da5cb5b1461028557806391557ac41461028d57806395d89b41146102a0578063a22cb465146102a857600080fd5b806323b872dd1161011557806323b872dd146101f857806342842e0e1461020b57806342966c681461021e5780636352211e146102315780636411fb451461024457806370a082311461025757600080fd5b806301ffc9a71461015d57806306fdde0314610185578063081812fc1461019a578063095ea7b3146101c55780631249c58b146101da57806318160ddd146101e2575b600080fd5b61017061016b36600461289a565b610322565b60405190151581526020015b60405180910390f35b61018d610374565b60405161017c9190612916565b6101ad6101a8366004612929565b610406565b6040516001600160a01b03909116815260200161017c565b6101d86101d3366004612957565b610493565b005b6101d86105a4565b6101ea610605565b60405190815260200161017c565b6101d8610206366004612983565b610615565b6101d8610219366004612983565b610647565b6101d861022c366004612929565b610662565b6101ad61023f366004612929565b6106dc565b6101d86102523660046129d4565b610753565b6101ea610265366004612a57565b6107f9565b6101d8610880565b6101d8610280366004612aba565b6108b9565b6101ad610972565b6101ad61029b366004612929565b610981565b61018d610a58565b6101d86102b6366004612b6b565b610a67565b610170610a72565b6101d86102d1366004612bc7565b610a9b565b61018d6102e4366004612929565b610acd565b61018d6102f7366004612a57565b610c4e565b61017061030a366004612c75565b610d66565b6101d861031d366004612a57565b610d94565b60006001600160e01b031982166380ac58cd60e01b148061035357506001600160e01b03198216635b5e139f60e01b145b8061036e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461038390612cae565b80601f01602080910402602001604051908101604052809291908181526020018280546103af90612cae565b80156103fc5780601f106103d1576101008083540402835291602001916103fc565b820191906000526020600020905b8154815290600101906020018083116103df57829003601f168201915b5050505050905090565b600061041182610e3a565b6104775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061049e826106dc565b9050806001600160a01b0316836001600160a01b0316141561050c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161046e565b336001600160a01b038216148061052857506105288133610d66565b6105955760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161046e565b61059f8383610e57565b505050565b6105ac610a72565b6105e35760405162461bcd60e51b81526020600482015260086024820152673737ba1037b832b760c11b604482015260640161046e565b6105f5336105f060095490565b610ec5565b610603600980546001019055565b565b600061061060095490565b905090565b610620335b82610ff2565b61063c5760405162461bcd60e51b815260040161046e90612ce9565b61059f8383836110bc565b61059f83838360405180602001604052806000815250610a9b565b61066b3361061a565b6106d05760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b606482015260840161046e565b6106d981611255565b50565b6000818152600260205260408120546001600160a01b03168061036e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161046e565b3361075c610972565b6001600160a01b0316146107825760405162461bcd60e51b815260040161046e90612d3a565b60005b828110156107f35781600760008686858181106107a4576107a4612d6f565b90506020020160208101906107b99190612a57565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806107eb81612d9b565b915050610785565b50505050565b60006001600160a01b0382166108645760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161046e565b506001600160a01b031660009081526003602052604090205490565b33610889610972565b6001600160a01b0316146108af5760405162461bcd60e51b815260040161046e90612d3a565b61060360006112ea565b6108c1610a72565b806108e457506108cf610972565b6001600160a01b0316336001600160a01b0316145b61091c5760405162461bcd60e51b815260206004820152600960248201526827b7363c9037b832b760b91b604482015260640161046e565b60005b815181101561096e5761094e82828151811061093d5761093d612d6f565b60200260200101516105f060095490565b61095c600980546001019055565b8061096681612d9b565b91505061091f565b5050565b6006546001600160a01b031690565b6040516331a9108f60e11b81526004810182905260009081903090636352211e9060240160206040518083038186803b1580156109bd57600080fd5b505afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f59190612db6565b6001600160a01b03811660009081526007602052604090205490915060ff168015610a3657506000838152600860205260409020546001600160a01b031615155b1561036e5750506000908152600860205260409020546001600160a01b031690565b60606001805461038390612cae565b61096e33838361133c565b60006361ce8b01421180156106105750610a936215f9006361ce8b01612dd3565b421115905090565b610aa53383610ff2565b610ac15760405162461bcd60e51b815260040161046e90612ce9565b6107f384848484611407565b6060610ad882610e3a565b610b0f5760405162461bcd60e51b81526020600482015260086024820152672737903a37b5b2b760c11b604482015260640161046e565b60405162b86e3360e51b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d01fde8c90829063170dc6609060240160006040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb29190810190612deb565b610bbe6102f786610981565b604051602001610bcf929190612e7d565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610bfa9190612916565b60006040518083038186803b158015610c1257600080fd5b505afa158015610c26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261036e9190810190612deb565b60606000610c5b8361143a565b80516020808301516040808501516060860151608087015192519697506000967f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169663d5fb1b1996610cbc9691959194939201612ff9565b6040516020818303038152906040526040518263ffffffff1660e01b8152600401610ce79190612916565b60006040518083038186803b158015610cff57600080fd5b505afa158015610d13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3b9190810190612deb565b905080604051602001610d4e9190613283565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33610d9d610972565b6001600160a01b031614610dc35760405162461bcd60e51b815260040161046e90612d3a565b6001600160a01b038116610e285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046e565b6106d9816112ea565b80546001019055565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610e8c826106dc565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b038216610f1b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161046e565b610f2481610e3a565b15610f715760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161046e565b610f7d6000838361171e565b6001600160a01b0382166000908152600360205260408120805460019290610fa6908490612dd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613587833981519152908290a45050565b6000610ffd82610e3a565b61105e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161046e565b6000611069836106dc565b9050806001600160a01b0316846001600160a01b031614806110a45750836001600160a01b031661109984610406565b6001600160a01b0316145b806110b457506110b48185610d66565b949350505050565b826001600160a01b03166110cf826106dc565b6001600160a01b0316146111375760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161046e565b6001600160a01b0382166111995760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161046e565b6111a483838361171e565b6111af600082610e57565b6001600160a01b03831660009081526003602052604081208054600192906111d89084906132c8565b90915550506001600160a01b0382166000908152600360205260408120805460019290611206908490612dd3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061358783398151915291a4505050565b6000611260826106dc565b905061126e8160008461171e565b611279600083610e57565b6001600160a01b03811660009081526003602052604081208054600192906112a29084906132c8565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613587833981519152908390a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561139a5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161046e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114128484846110bc565b61141e8484848461176d565b6107f35760405162461bcd60e51b815260040161046e906132df565b61144261285d565b6001600160a01b038216600060118260131a6018028161146457611464613331565b0490506000602283601d1a6005028161147f5761147f613331565b046020019050606160338460171a6005028161149d5761149d613331565b0401604801600281049050600060108560181a816114bd576114bd613331565b04605101905060006080866015600b91901a0260ff16816114e0576114e0613331565b046046019050600a82038111156114f8575060091981015b6040805160a081019091528061157261152d89601c1a60028b60191a8161152157611521613331565b0660ff168a600061187a565b61154d60028b601c1a8161154357611543613331565b06878760646119ce565b61156d60028c601a1a8161156357611563613331565b068a8a6064611a16565b611a8e565b81526020016115e06115a089601c1a60028b60191a8161159457611594613331565b0660ff168a600a61187a565b6115c060028b601c1a816115b6576115b6613331565b068787605a6119ce565b61156d60028c601a1a816115d6576115d6613331565b068a8a605a611a16565b815260200161164e61160e89601c1a60028b60191a8161160257611602613331565b0660ff168a604661187a565b61162e60028b601c1a8161162457611624613331565b06878760466119ce565b61156d60028c601a1a8161164457611644613331565b068a8a6046611a16565b81526020016116bc61167c89601c1a60028b60191a8161167057611670613331565b0660ff168a605a61187a565b61169c60028b601c1a8161169257611692613331565b06878760146119ce565b61156d60028c601a1a816116b2576116b2613331565b068a8a6014611a16565b81526020016117106116ea89601c1a60028b60191a816116de576116de613331565b0660ff168a606461187a565b61170a60028b601c1a8161170057611700613331565b06878760006119ce565b88611a8e565b905298975050505050505050565b6001600160a01b03821660009081526007602052604090205460ff161561059f57600081815260086020526040902080546001600160a01b0385166001600160a01b0319909116179055505050565b60006001600160a01b0384163b1561186f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906117b1903390899088908890600401613347565b602060405180830381600087803b1580156117cb57600080fd5b505af19250505080156117fb575060408051601f3d908101601f191682019092526117f89181019061337a565b60015b611855573d808015611829576040519150601f19603f3d011682016040523d82523d6000602084013e61182e565b606091505b50805161184d5760405162461bcd60e51b815260040161046e906132df565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110b4565b506001949350505050565b600080611888600487613397565b60ff16905083816118f5576118ec86156118ac576118a782600a6133b9565b6118b7565b6118b7600a836133fa565b6118c49060ff8716613439565b826118d360ff881660646133fa565b6118dd9190613439565b6118e791906133b9565b611ad5565b925050506110b4565b816001141561191d576118ec8615611912576118a782601e6133b9565b6118b7601e836133fa565b8160021415611978576118ec861561193f5761193a8260326133b9565b61194a565b61194a6032836133fa565b6119568660ff16611b08565b6119609190613439565b8261196d8760ff16611b08565b6118d39060646133fa565b6119c360808860ff161161198d576000611990565b60015b60ff1687156119a057603c6119a4565b603b195b6119ae9190613439565b6119b890836133b9565b61194a90601e6133b9565b979650505050505050565b60008060ff86166119fe576119e283611ffe565b60ff1690506064818103860285830201046001019150506110b4565b50816064818103860285830201049695505050505050565b60008060ff8616611a3457611a2a83611ffe565b60ff169050611a43565b611a3d8361235a565b60ff1690505b6064611a4f85836134be565b86611a5b8460646132c8565b611a6591906134be565b611a6f9190612dd3565b611a7991906134dd565b611a84906001612dd3565b9695505050505050565b6060611a9984612760565b611aa284612760565b611aab84612760565b604051602001611abd939291906134f1565b60405160208183030381529060405290509392505050565b606490056000808212611aee57610168825b0692915050565b610168826000190281611ae757611ae7613331565b919050565b6000600d8261ffff161015611b1f57506000919050565b60118261ffff161015611b3457506001919050565b60138261ffff161015611b4957506002919050565b60158261ffff161015611b5e57506003919050565b60178261ffff161015611b7357506004919050565b60188261ffff161015611b8857506005919050565b60198261ffff161015611b9d57506006919050565b601b8261ffff161015611bb257506007919050565b601c8261ffff161015611bc757506008919050565b601d8261ffff161015611bdc57506009919050565b601e8261ffff161015611bf15750600a919050565b601f8261ffff161015611c065750600b919050565b60208261ffff161015611c1b5750600d919050565b60218261ffff161015611c305750600e919050565b60228261ffff161015611c455750600f919050565b60238261ffff161015611c5a57506011919050565b60248261ffff161015611c6f57506012919050565b60258261ffff161015611c8457506014919050565b60268261ffff161015611c9957506015919050565b60278261ffff161015611cae57506017919050565b60288261ffff161015611cc357506019919050565b60298261ffff161015611cd85750601b919050565b602a8261ffff161015611ced5750601d919050565b602b8261ffff161015611d025750601f919050565b602c8261ffff161015611d1757506022919050565b602d8261ffff161015611d2c57506024919050565b602e8261ffff161015611d4157506026919050565b602f8261ffff161015611d5657506029919050565b60308261ffff161015611d6b5750602c919050565b60318261ffff161015611d805750602f919050565b60328261ffff161015611d9557506032919050565b60338261ffff161015611daa57506034919050565b60348261ffff161015611dbf57506037919050565b60358261ffff161015611dd45750603a919050565b60368261ffff161015611de95750603d919050565b60378261ffff161015611dfe5750603f919050565b60388261ffff161015611e1357506041919050565b60398261ffff161015611e2857506044919050565b603a8261ffff161015611e3d57506046919050565b603b8261ffff161015611e5257506048919050565b603c8261ffff161015611e675750604a919050565b603d8261ffff161015611e7c5750604c919050565b603e8261ffff161015611e915750604e919050565b603f8261ffff161015611ea65750604f919050565b60408261ffff161015611ebb57506051919050565b60418261ffff161015611ed057506052919050565b60428261ffff161015611ee557506054919050565b60438261ffff161015611efa57506055919050565b60448261ffff161015611f0f57506056919050565b60458261ffff161015611f2457506058919050565b60468261ffff161015611f3957506059919050565b60478261ffff161015611f4e5750605a919050565b60488261ffff161015611f635750605b919050565b604a8261ffff161015611f785750605c919050565b604b8261ffff161015611f8d5750605d919050565b604c8261ffff161015611fa25750605e919050565b604e8261ffff161015611fb75750605f919050565b60508261ffff161015611fcc57506060919050565b60528261ffff161015611fe157506061919050565b60568261ffff161015611ff657506062919050565b506063919050565b6000602782101561201157506000919050565b602d82101561202257506001919050565b603182101561203357506002919050565b603482101561204457506003919050565b603582101561205557506004919050565b603682101561206657506004919050565b603782101561207757506005919050565b603882101561208857506005919050565b603982101561209957506006919050565b603a8210156120aa57506006919050565b603b8210156120bb57506007919050565b603c8210156120cc57506007919050565b603d8210156120dd57506008919050565b603e8210156120ee57506009919050565b603f8210156120ff57506009919050565b60408210156121105750600a919050565b60418210156121215750600b919050565b60428210156121325750600c919050565b60438210156121435750600d919050565b60448210156121545750600e919050565b60458210156121655750600f919050565b604682101561217657506010919050565b604782101561218757506012919050565b604882101561219857506013919050565b60498210156121a957506014919050565b604a8210156121ba57506016919050565b604b8210156121cb57506017919050565b604c8210156121dc57506019919050565b604d8210156121ed5750601b919050565b604e8210156121fe5750601c919050565b604f82101561220f5750601e919050565b605082101561222057506020919050565b605182101561223157506022919050565b605282101561224257506025919050565b605382101561225357506027919050565b605482101561226457506029919050565b60558210156122755750602c919050565b60568210156122865750602f919050565b605782101561229757506031919050565b60588210156122a857506034919050565b60598210156122b957506037919050565b605a8210156122ca5750603b919050565b605b8210156122db5750603e919050565b605c8210156122ec57506041919050565b605d8210156122fd57506045919050565b605e82101561230e57506049919050565b605f82101561231f5750604d919050565b606082101561233057506051919050565b606182101561234157506055919050565b60628210156123525750605a919050565b50605f919050565b6000601682101561236d57506000919050565b601c82101561237e57506001919050565b602082101561238f57506002919050565b60208210156123a057506003919050565b60228210156123b157506003919050565b60248210156123c257506004919050565b60278210156123d357506005919050565b60298210156123e457506006919050565b602b8210156123f557506007919050565b602e82101561240657506009919050565b602f8210156124175750600a919050565b60318210156124285750600b919050565b60328210156124395750600c919050565b603382101561244a5750600d919050565b603582101561245b5750600e919050565b603682101561246c5750600f919050565b603782101561247d57506010919050565b603882101561248e57506011919050565b603982101561249f57506012919050565b603a8210156124b057506013919050565b603b8210156124c157506014919050565b603c8210156124d257506015919050565b603d8210156124e357506016919050565b603e8210156124f457506017919050565b603f82101561250557506019919050565b60408210156125165750601a919050565b60418210156125275750601b919050565b60428210156125385750601c919050565b60438210156125495750601e919050565b604482101561255a5750601f919050565b604582101561256b57506020919050565b604682101561257c57506022919050565b604782101561258d57506023919050565b604882101561259e57506025919050565b60498210156125af57506026919050565b604a8210156125c057506028919050565b604b8210156125d15750602a919050565b604c8210156125e25750602b919050565b604d8210156125f35750602d919050565b604e8210156126045750602f919050565b604f82101561261557506031919050565b605082101561262657506033919050565b605182101561263757506035919050565b605282101561264857506037919050565b605382101561265957506039919050565b605482101561266a5750603b919050565b605582101561267b5750603d919050565b605682101561268c5750603f919050565b605782101561269d57506041919050565b60588210156126ae57506044919050565b60598210156126bf57506046919050565b605a8210156126d057506048919050565b605b8210156126e15750604b919050565b605c8210156126f25750604d919050565b605d82101561270357506050919050565b605e82101561271457506053919050565b605f82101561272557506055919050565b606082101561273657506058919050565b60618210156127475750605b919050565b60628210156127585750605e919050565b506061919050565b6060816127845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156127ae578061279881612d9b565b91506127a79050600a836134dd565b9150612788565b6000816001600160401b038111156127c8576127c8612a74565b6040519080825280601f01601f1916602001820160405280156127f2576020820181803683370190505b5090505b84156110b4576128076001836132c8565b9150612814600a86613572565b61281f906030612dd3565b60f81b81838151811061283457612834612d6f565b60200101906001600160f81b031916908160001a905350612856600a866134dd565b94506127f6565b6040518060a001604052806005905b606081526020019060019003908161286c5790505090565b6001600160e01b0319811681146106d957600080fd5b6000602082840312156128ac57600080fd5b81356128b781612884565b9392505050565b60005b838110156128d95781810151838201526020016128c1565b838111156107f35750506000910152565b600081518084526129028160208601602086016128be565b601f01601f19169290920160200192915050565b6020815260006128b760208301846128ea565b60006020828403121561293b57600080fd5b5035919050565b6001600160a01b03811681146106d957600080fd5b6000806040838503121561296a57600080fd5b823561297581612942565b946020939093013593505050565b60008060006060848603121561299857600080fd5b83356129a381612942565b925060208401356129b381612942565b929592945050506040919091013590565b80358015158114611b0357600080fd5b6000806000604084860312156129e957600080fd5b83356001600160401b0380821115612a0057600080fd5b818601915086601f830112612a1457600080fd5b813581811115612a2357600080fd5b8760208260051b8501011115612a3857600080fd5b602092830195509350612a4e91860190506129c4565b90509250925092565b600060208284031215612a6957600080fd5b81356128b781612942565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612ab257612ab2612a74565b604052919050565b60006020808385031215612acd57600080fd5b82356001600160401b0380821115612ae457600080fd5b818501915085601f830112612af857600080fd5b813581811115612b0a57612b0a612a74565b8060051b9150612b1b848301612a8a565b8181529183018401918481019088841115612b3557600080fd5b938501935b83851015612b5f5784359250612b4f83612942565b8282529385019390850190612b3a565b98975050505050505050565b60008060408385031215612b7e57600080fd5b8235612b8981612942565b9150612b97602084016129c4565b90509250929050565b60006001600160401b03821115612bb957612bb9612a74565b50601f01601f191660200190565b60008060008060808587031215612bdd57600080fd5b8435612be881612942565b93506020850135612bf881612942565b92506040850135915060608501356001600160401b03811115612c1a57600080fd5b8501601f81018713612c2b57600080fd5b8035612c3e612c3982612ba0565b612a8a565b818152886020838501011115612c5357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612c8857600080fd5b8235612c9381612942565b91506020830135612ca381612942565b809150509250929050565b600181811c90821680612cc257607f821691505b60208210811415612ce357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612daf57612daf612d85565b5060010190565b600060208284031215612dc857600080fd5b81516128b781612942565b60008219821115612de657612de6612d85565b500190565b600060208284031215612dfd57600080fd5b81516001600160401b03811115612e1357600080fd5b8201601f81018413612e2457600080fd5b8051612e32612c3982612ba0565b818152856020838501011115612e4757600080fd5b612e588260208301602086016128be565b95945050505050565b60008151612e738185602086016128be565b9290920192915050565b747b226e616d65223a20225a6f7261205a6f7262202360581b81528251600090612eae8160158501602088016128be565b7f222c20226465736372697074696f6e223a20225a6f7261205a6f7262204e65776015918401918201526f102cb2b0b93990223937b8101918191960811b60358201527f5c6e5c6e43656c656272617465205a6f7261207769746820796f7572206f776e60458201527f20756e69717565205a6f72625c6e5c6e5b68747470733a2f2f7a6f72622e646560658201527f762f5d287a6f72622e646576295c6e5c6e5768656e205a6f726273206172652060858201527f736f6c64206f72207472616e736665727265642c20746865792075706461746560a58201527f20746f207265666c65637420746865207a6f7262206f6620746865206375727260c58201527632b73a1037bbb732b9171116101134b6b0b3b2911d101160491b60e58201528351612fe28160fc8401602088016128be565b611a8460fc8284010161227d60f01b815260020190565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f737667222076696577426f783d223020302032323020323230223e3c6460208201527f6566733e3c72616469616c4772616469656e742066783d2236362e343625222060408201527f66793d2232342e333625222069643d2267726164223e3c73746f70206f66667360608201527732ba1e91189a971b1912911039ba37b816b1b7b637b91e9160411b6080820152600086516130c4816098850160208b016128be565b7f22202f3e3c73746f70206f66667365743d2233392e353825222073746f702d636098918401918201526537b637b91e9160d11b60b8820181905287516131128160be850160208c016128be565b7f22202f3e3c73746f70206f66667365743d2237322e393225222073746f702d6360be939091019283015260de820152612b5f6131d86131d261319c61319661315e60e487018c612e61565b7f22202f3e3c73746f70206f66667365743d2239302e363325222073746f702d6381526537b637b91e9160d11b602082015260260190565b89612e61565b7f22202f3e3c73746f70206f66667365743d2231303025222073746f702d636f6c81526337b91e9160e11b602082015260240190565b86612e61565b7f22202f3e3c2f72616469616c4772616469656e743e3c2f646566733e3c67207481527f72616e73666f726d3d227472616e736c61746528313020313029207363616c6560208201527f28302e3929223e3c636972636c652063783d22353025222063793d223530252260408201527f20723d22353025222066696c6c3d2275726c2823677261642922202f3e3c2f676060820152661f1e17b9bb339f60c91b608082015260870190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152600082516132bb81601a8501602087016128be565b91909101601a0192915050565b6000828210156132da576132da612d85565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611a84908301846128ea565b60006020828403121561338c57600080fd5b81516128b781612884565b600060ff8316806133aa576133aa613331565b8060ff84160691505092915050565b600080821280156001600160ff1b03849003851316156133db576133db612d85565b600160ff1b83900384128116156133f4576133f4612d85565b50500190565b60008083128015600160ff1b85018412161561341857613418612d85565b6001600160ff1b038401831381161561343357613433612d85565b50500390565b60006001600160ff1b038184138284138082168684048611161561345f5761345f612d85565b600160ff1b600087128281168783058912161561347e5761347e612d85565b6000871292508782058712848416161561349a5761349a612d85565b878505871281841616156134b0576134b0612d85565b505050929093029392505050565b60008160001904831182151516156134d8576134d8612d85565b500290565b6000826134ec576134ec613331565b500490565b630d0e6d8560e31b8152600084516135108160048501602089016128be565b61016160f51b60049184019182015284516135328160068401602089016128be565b6201296160ed1b6006929091019182015283516135568160098401602088016128be565b61252960f01b60099290910191820152600b0195945050505050565b60008261358157613581613331565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212200c9fb9d06c738ca6e843d104aec7a9f74dcfab23cbd53363af14e45cb7f695e964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This custom NFT contract stores additional metadata to use for tokenURI",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 333,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 339,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 343,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 347,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 353,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 210,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4426,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "knownMarketplace",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4430,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "lastOwner",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4433,
        "contract": "contracts/ZorbNFT.sol:ZorbNFT",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)1654_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1654_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1653,
            "contract": "contracts/ZorbNFT.sol:ZorbNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}